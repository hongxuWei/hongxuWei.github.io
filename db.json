{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"themes/material/source/css/disqus-proxy.css","path":"css/disqus-proxy.css","modified":0,"renderable":1},{"_id":"themes/material/source/css/disqus-proxy.min.css","path":"css/disqus-proxy.min.css","modified":0,"renderable":1},{"_id":"themes/material/source/css/duoshuo.css","path":"css/duoshuo.css","modified":0,"renderable":1},{"_id":"themes/material/source/css/duoshuo.min.css","path":"css/duoshuo.min.css","modified":0,"renderable":1},{"_id":"themes/material/source/css/fontawesome.min.css","path":"css/fontawesome.min.css","modified":0,"renderable":1},{"_id":"themes/material/source/css/ie-blocker.css","path":"css/ie-blocker.css","modified":0,"renderable":1},{"_id":"themes/material/source/css/gallery.min.css","path":"css/gallery.min.css","modified":0,"renderable":1},{"_id":"themes/material/source/css/material-icons.css","path":"css/material-icons.css","modified":0,"renderable":1},{"_id":"themes/material/source/css/prettify.css","path":"css/prettify.css","modified":0,"renderable":1},{"_id":"themes/material/source/css/prettify.min.css","path":"css/prettify.min.css","modified":0,"renderable":1},{"_id":"themes/material/source/css/uc.css","path":"css/uc.css","modified":0,"renderable":1},{"_id":"themes/material/source/fonts/MaterialIcons-Regular.woff","path":"fonts/MaterialIcons-Regular.woff","modified":0,"renderable":1},{"_id":"themes/material/source/fonts/MaterialIcons-Regular.woff2","path":"fonts/MaterialIcons-Regular.woff2","modified":0,"renderable":1},{"_id":"themes/material/source/img/avatar.png","path":"img/avatar.png","modified":0,"renderable":1},{"_id":"themes/material/source/img/bg.png","path":"img/bg.png","modified":0,"renderable":1},{"_id":"themes/material/source/img/browserstack_logo.png","path":"img/browserstack_logo.png","modified":0,"renderable":1},{"_id":"themes/material/source/img/sidebar_header.png","path":"img/sidebar_header.png","modified":0,"renderable":1},{"_id":"themes/material/source/img/upyun_logo.svg","path":"img/upyun_logo.svg","modified":0,"renderable":1},{"_id":"themes/material/source/js/Valine.min.js","path":"js/Valine.min.js","modified":0,"renderable":1},{"_id":"themes/material/source/js/MathJax.js","path":"js/MathJax.js","modified":0,"renderable":1},{"_id":"themes/material/source/js/hanabi-browser-bundle.js","path":"js/hanabi-browser-bundle.js","modified":0,"renderable":1},{"_id":"themes/material/source/js/ie-blocker.en.js","path":"js/ie-blocker.en.js","modified":0,"renderable":1},{"_id":"themes/material/source/js/ie-blocker.zhCN.js","path":"js/ie-blocker.zhCN.js","modified":0,"renderable":1},{"_id":"themes/material/source/js/lazyload.min.js","path":"js/lazyload.min.js","modified":0,"renderable":1},{"_id":"themes/material/source/js/lsloader.js","path":"js/lsloader.js","modified":0,"renderable":1},{"_id":"themes/material/source/js/lsloader.min.js","path":"js/lsloader.min.js","modified":0,"renderable":1},{"_id":"themes/material/source/js/nprogress.js","path":"js/nprogress.js","modified":0,"renderable":1},{"_id":"themes/material/source/js/prettify.min.js","path":"js/prettify.min.js","modified":0,"renderable":1},{"_id":"themes/material/source/js/queue.js","path":"js/queue.js","modified":0,"renderable":1},{"_id":"themes/material/source/js/queue.min.js","path":"js/queue.min.js","modified":0,"renderable":1},{"_id":"themes/material/source/js/smoothscroll.js","path":"js/smoothscroll.js","modified":0,"renderable":1},{"_id":"themes/material/source/css/material.css","path":"css/material.css","modified":0,"renderable":1},{"_id":"themes/material/source/css/material.min.css","path":"css/material.min.css","modified":0,"renderable":1},{"_id":"themes/material/source/css/style.css","path":"css/style.css","modified":0,"renderable":1},{"_id":"themes/material/source/css/style.min.css","path":"css/style.min.css","modified":0,"renderable":1},{"_id":"themes/material/source/fonts/MaterialIcons-Regular.ttf","path":"fonts/MaterialIcons-Regular.ttf","modified":0,"renderable":1},{"_id":"themes/material/source/fonts/fontawesome-webfont.woff2","path":"fonts/fontawesome-webfont.woff2","modified":0,"renderable":1},{"_id":"themes/material/source/fonts/fontawesome-webfont.woff","path":"fonts/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/material/source/img/avatar.jpeg","path":"img/avatar.jpeg","modified":0,"renderable":1},{"_id":"themes/material/source/img/daily_pic.png","path":"img/daily_pic.png","modified":0,"renderable":1},{"_id":"themes/material/source/js/jquery.min.js","path":"js/jquery.min.js","modified":0,"renderable":1},{"_id":"themes/material/source/js/js.js","path":"js/js.js","modified":0,"renderable":1},{"_id":"themes/material/source/js/js.min.js","path":"js/js.min.js","modified":0,"renderable":1},{"_id":"themes/material/source/css/prettify/atelier-cave-dark.min.css","path":"css/prettify/atelier-cave-dark.min.css","modified":0,"renderable":1},{"_id":"themes/material/source/css/prettify/atelier-cave-light.min.css","path":"css/prettify/atelier-cave-light.min.css","modified":0,"renderable":1},{"_id":"themes/material/source/css/prettify/atelier-dune-dark.min.css","path":"css/prettify/atelier-dune-dark.min.css","modified":0,"renderable":1},{"_id":"themes/material/source/css/prettify/atelier-dune-light.min.css","path":"css/prettify/atelier-dune-light.min.css","modified":0,"renderable":1},{"_id":"themes/material/source/css/prettify/atelier-estuary-dark.min.css","path":"css/prettify/atelier-estuary-dark.min.css","modified":0,"renderable":1},{"_id":"themes/material/source/css/prettify/atelier-estuary-light.min.css","path":"css/prettify/atelier-estuary-light.min.css","modified":0,"renderable":1},{"_id":"themes/material/source/css/prettify/atelier-forest-dark.min.css","path":"css/prettify/atelier-forest-dark.min.css","modified":0,"renderable":1},{"_id":"themes/material/source/css/prettify/atelier-forest-light.min.css","path":"css/prettify/atelier-forest-light.min.css","modified":0,"renderable":1},{"_id":"themes/material/source/css/prettify/atelier-heath-dark.min.css","path":"css/prettify/atelier-heath-dark.min.css","modified":0,"renderable":1},{"_id":"themes/material/source/css/prettify/atelier-heath-light.min.css","path":"css/prettify/atelier-heath-light.min.css","modified":0,"renderable":1},{"_id":"themes/material/source/css/prettify/atelier-lakeside-dark.min.css","path":"css/prettify/atelier-lakeside-dark.min.css","modified":0,"renderable":1},{"_id":"themes/material/source/css/prettify/atelier-lakeside-light.min.css","path":"css/prettify/atelier-lakeside-light.min.css","modified":0,"renderable":1},{"_id":"themes/material/source/css/prettify/atelier-plateau-dark.min.css","path":"css/prettify/atelier-plateau-dark.min.css","modified":0,"renderable":1},{"_id":"themes/material/source/css/prettify/atelier-plateau-light.min.css","path":"css/prettify/atelier-plateau-light.min.css","modified":0,"renderable":1},{"_id":"themes/material/source/css/prettify/atelier-savanna-dark.min.css","path":"css/prettify/atelier-savanna-dark.min.css","modified":0,"renderable":1},{"_id":"themes/material/source/css/prettify/atelier-savanna-light.min.css","path":"css/prettify/atelier-savanna-light.min.css","modified":0,"renderable":1},{"_id":"themes/material/source/css/prettify/atelier-seaside-dark.min.css","path":"css/prettify/atelier-seaside-dark.min.css","modified":0,"renderable":1},{"_id":"themes/material/source/css/prettify/atelier-seaside-light.min.css","path":"css/prettify/atelier-seaside-light.min.css","modified":0,"renderable":1},{"_id":"themes/material/source/css/prettify/atelier-sulphurpool-dark.min.css","path":"css/prettify/atelier-sulphurpool-dark.min.css","modified":0,"renderable":1},{"_id":"themes/material/source/css/prettify/atelier-sulphurpool-light.min.css","path":"css/prettify/atelier-sulphurpool-light.min.css","modified":0,"renderable":1},{"_id":"themes/material/source/css/prettify/github-v2.min.css","path":"css/prettify/github-v2.min.css","modified":0,"renderable":1},{"_id":"themes/material/source/css/prettify/github.min.css","path":"css/prettify/github.min.css","modified":0,"renderable":1},{"_id":"themes/material/source/css/prettify/hemisu-dark.min.css","path":"css/prettify/hemisu-dark.min.css","modified":0,"renderable":1},{"_id":"themes/material/source/css/prettify/hemisu-light.min.css","path":"css/prettify/hemisu-light.min.css","modified":0,"renderable":1},{"_id":"themes/material/source/css/prettify/tomorrow-night-blue.min.css","path":"css/prettify/tomorrow-night-blue.min.css","modified":0,"renderable":1},{"_id":"themes/material/source/css/prettify/tomorrow-night-bright.min.css","path":"css/prettify/tomorrow-night-bright.min.css","modified":0,"renderable":1},{"_id":"themes/material/source/css/prettify/tomorrow-night-eighties.min.css","path":"css/prettify/tomorrow-night-eighties.min.css","modified":0,"renderable":1},{"_id":"themes/material/source/css/prettify/tomorrow-night.min.css","path":"css/prettify/tomorrow-night.min.css","modified":0,"renderable":1},{"_id":"themes/material/source/css/prettify/tomorrow.min.css","path":"css/prettify/tomorrow.min.css","modified":0,"renderable":1},{"_id":"themes/material/source/css/prettify/tranquil-heart.min.css","path":"css/prettify/tranquil-heart.min.css","modified":0,"renderable":1},{"_id":"themes/material/source/css/prettify/vibrant-ink.min.css","path":"css/prettify/vibrant-ink.min.css","modified":0,"renderable":1},{"_id":"themes/material/source/fonts/FontAwesome.otf","path":"fonts/FontAwesome.otf","modified":0,"renderable":1},{"_id":"themes/material/source/fonts/MaterialIcons-Regular.eot","path":"fonts/MaterialIcons-Regular.eot","modified":0,"renderable":1},{"_id":"themes/material/source/fonts/fontawesome-webfont.eot","path":"fonts/fontawesome-webfont.eot","modified":0,"renderable":1},{"_id":"themes/material/source/fonts/fontawesome-webfont.ttf","path":"fonts/fontawesome-webfont.ttf","modified":0,"renderable":1},{"_id":"themes/material/source/img/footer/footer_ico-bilibili.svg","path":"img/footer/footer_ico-bilibili.svg","modified":0,"renderable":1},{"_id":"themes/material/source/img/footer/footer_ico-facebook.svg","path":"img/footer/footer_ico-facebook.svg","modified":0,"renderable":1},{"_id":"themes/material/source/img/footer/footer_ico-github.svg","path":"img/footer/footer_ico-github.svg","modified":0,"renderable":1},{"_id":"themes/material/source/img/footer/footer_ico-gplus.svg","path":"img/footer/footer_ico-gplus.svg","modified":0,"renderable":1},{"_id":"themes/material/source/img/footer/footer_ico-instagram.svg","path":"img/footer/footer_ico-instagram.svg","modified":0,"renderable":1},{"_id":"themes/material/source/img/footer/footer_ico-telegram.svg","path":"img/footer/footer_ico-telegram.svg","modified":0,"renderable":1},{"_id":"themes/material/source/img/footer/footer_ico-linkedin.svg","path":"img/footer/footer_ico-linkedin.svg","modified":0,"renderable":1},{"_id":"themes/material/source/img/footer/footer_ico-tumblr.svg","path":"img/footer/footer_ico-tumblr.svg","modified":0,"renderable":1},{"_id":"themes/material/source/img/footer/footer_ico-twitter.svg","path":"img/footer/footer_ico-twitter.svg","modified":0,"renderable":1},{"_id":"themes/material/source/img/footer/footer_ico-v2ex.svg","path":"img/footer/footer_ico-v2ex.svg","modified":0,"renderable":1},{"_id":"themes/material/source/img/footer/footer_ico-weibo.svg","path":"img/footer/footer_ico-weibo.svg","modified":0,"renderable":1},{"_id":"themes/material/source/img/footer/footer_ico-zhihu.svg","path":"img/footer/footer_ico-zhihu.svg","modified":0,"renderable":1},{"_id":"themes/material/source/img/gallery/arrow.svg","path":"img/gallery/arrow.svg","modified":0,"renderable":1},{"_id":"themes/material/source/img/gallery/close.svg","path":"img/gallery/close.svg","modified":0,"renderable":1},{"_id":"themes/material/source/img/gallery/spinner.svg","path":"img/gallery/spinner.svg","modified":0,"renderable":1},{"_id":"themes/material/source/img/random/material-10.png","path":"img/random/material-10.png","modified":0,"renderable":1},{"_id":"themes/material/source/img/random/material-12.png","path":"img/random/material-12.png","modified":0,"renderable":1},{"_id":"themes/material/source/img/random/material-17.png","path":"img/random/material-17.png","modified":0,"renderable":1},{"_id":"themes/material/source/img/random/material-19.png","path":"img/random/material-19.png","modified":0,"renderable":1},{"_id":"themes/material/source/img/random/material-3.png","path":"img/random/material-3.png","modified":0,"renderable":1},{"_id":"themes/material/source/img/random/material-4.png","path":"img/random/material-4.png","modified":0,"renderable":1},{"_id":"themes/material/source/img/random/material-6.png","path":"img/random/material-6.png","modified":0,"renderable":1},{"_id":"themes/material/source/img/random/material-8.png","path":"img/random/material-8.png","modified":0,"renderable":1},{"_id":"themes/material/source/img/random/material-9.png","path":"img/random/material-9.png","modified":0,"renderable":1},{"_id":"themes/material/source/js/gallery/gallery.js","path":"js/gallery/gallery.js","modified":0,"renderable":1},{"_id":"themes/material/source/img/favicon.png","path":"img/favicon.png","modified":0,"renderable":1},{"_id":"themes/material/source/img/random/material-1.png","path":"img/random/material-1.png","modified":0,"renderable":1},{"_id":"themes/material/source/img/logo.png","path":"img/logo.png","modified":0,"renderable":1},{"_id":"themes/material/source/img/random/material-11.png","path":"img/random/material-11.png","modified":0,"renderable":1},{"_id":"themes/material/source/img/random/material-13.png","path":"img/random/material-13.png","modified":0,"renderable":1},{"_id":"themes/material/source/img/random/material-14.png","path":"img/random/material-14.png","modified":0,"renderable":1},{"_id":"themes/material/source/img/random/material-15.png","path":"img/random/material-15.png","modified":0,"renderable":1},{"_id":"themes/material/source/img/random/material-16.png","path":"img/random/material-16.png","modified":0,"renderable":1},{"_id":"themes/material/source/img/random/material-18.png","path":"img/random/material-18.png","modified":0,"renderable":1},{"_id":"themes/material/source/img/random/material-2.png","path":"img/random/material-2.png","modified":0,"renderable":1},{"_id":"themes/material/source/img/random/material-5.png","path":"img/random/material-5.png","modified":0,"renderable":1},{"_id":"themes/material/source/img/random/material-7.png","path":"img/random/material-7.png","modified":0,"renderable":1},{"_id":"themes/material/source/fonts/fontawesome-webfont.svg","path":"fonts/fontawesome-webfont.svg","modified":0,"renderable":1},{"_id":"themes/material/source/fonts/Roboto-Black.ttf","path":"fonts/Roboto-Black.ttf","modified":0,"renderable":1},{"_id":"themes/material/source/fonts/Roboto-Bold.ttf","path":"fonts/Roboto-Bold.ttf","modified":0,"renderable":1},{"_id":"themes/material/source/fonts/Roboto-Light.ttf","path":"fonts/Roboto-Light.ttf","modified":0,"renderable":1},{"_id":"themes/material/source/fonts/Roboto-Medium.ttf","path":"fonts/Roboto-Medium.ttf","modified":0,"renderable":1},{"_id":"themes/material/source/fonts/Roboto-Regular.ttf","path":"fonts/Roboto-Regular.ttf","modified":0,"renderable":1},{"_id":"themes/material/source/fonts/Roboto-Thin.ttf","path":"fonts/Roboto-Thin.ttf","modified":0,"renderable":1}],"Cache":[{"_id":"source/.DS_Store","hash":"e6c5e09c9f19847437c5acb69369894c508d4c51","modified":1525190536042},{"_id":"themes/material/.DS_Store","hash":"ccc005dd1bf187c4d80cb939384650db6edf8b0f","modified":1524237847531},{"_id":"themes/material/.eslintrc.json","hash":"83ddc0cdc18f28b967795b8dac0421a52cdf7ece","modified":1524237847680},{"_id":"themes/material/.gitignore","hash":"dd9e9495fc7ce09c026f7fdcef45cf8ddfde40d8","modified":1524237847600},{"_id":"themes/material/.travis.yml","hash":"10a09fe2b341ccad5b97d4bd9cc2c1c03e1863a3","modified":1524237847679},{"_id":"themes/material/CONTRIBUTING.md","hash":"148f555e47d4725fe1faac775107a4d7b03f7136","modified":1524237847601},{"_id":"themes/material/CONTRIBUTING.zh-cn.md","hash":"ef3ccef0451d6ac616b3a35fbfedb6abd35e6b41","modified":1524237847605},{"_id":"themes/material/LICENSE","hash":"12d81f50767d4e09aa7877da077ad9d1b915d75b","modified":1524237847531},{"_id":"themes/material/README.md","hash":"408e36745a8aeb187a25f309752c5e7da66f7e67","modified":1524237847600},{"_id":"themes/material/_config.template.yml","hash":"909c9b66c782311a0fe16bca4e75dc13e1b289ea","modified":1524237847601},{"_id":"themes/material/_config.yml","hash":"4aac5bf3e79fbb22a8f01472b63a1d4c3feaa1c0","modified":1524237847601},{"_id":"themes/material/contributing.json","hash":"1bc0871b1c7822b82533b614090ac0ab7c55282c","modified":1524237847532},{"_id":"themes/material/lint.sh","hash":"49c3a65f8ca65754ec7fefcd2dcb6adc187f3856","modified":1524237847596},{"_id":"themes/material/package.json","hash":"e00885ee25ac548685af9869cf4cf895118a744c","modified":1524237847600},{"_id":"source/_posts/.DS_Store","hash":"d995da903e61f16c270e777e968d45d43aee93dd","modified":1525190536041},{"_id":"source/_posts/Generator-async.md","hash":"4097c05365ccf9e88ed4176cbe6d2329fccf58cf","modified":1524665287203},{"_id":"source/_posts/Generator-async2.md","hash":"e23bcb41a2de3418c6695e393c5eb0f35932330c","modified":1524665322449},{"_id":"source/_posts/Hexo-gitpage.md","hash":"2576636fbbaff4f7c2878aca92de4fdefe9b0e23","modified":1524665176803},{"_id":"source/_posts/想开个-ES6-的坑.md","hash":"7e8dee1692c0e2292a58d8bf9482a99d6d9739c9","modified":1524665222463},{"_id":"source/_posts/青岛？.md","hash":"269dd66b2383d140769e5b52f3f730eb0f2ce7b7","modified":1525190676243},{"_id":"themes/material/.github/ISSUE_TEMPLATE.md","hash":"52a733a4d2e21a9c4d719495a0353c6719484f9f","modified":1524237847605},{"_id":"themes/material/.github/PULL_REQUEST_TEMPLATE.md","hash":"f2a3a0b929c0909ab99c96fb82853c2c2d67961a","modified":1524237847604},{"_id":"themes/material/_git/COMMIT_EDITMSG","hash":"9b74db7fefa3e019ff38cc7aa4ca7d54df07c06c","modified":1524237847679},{"_id":"themes/material/_git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1524237847625},{"_id":"themes/material/_git/config","hash":"e8a318ba42d027b4f4f195b2037f9101571706dd","modified":1524237847606},{"_id":"themes/material/_git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1524237847629},{"_id":"themes/material/_git/index","hash":"6c0f28687f3f0469462a7b4f2ec4136444f88351","modified":1524238004734},{"_id":"themes/material/_git/packed-refs","hash":"88833ce295c7254e268dde759b9de9ee299e4a7b","modified":1524237847679},{"_id":"themes/material/languages/ar.yml","hash":"472d71f052e08f3c03b15dd67d11ad41f2eee7bf","modified":1524237847599},{"_id":"themes/material/languages/de.yml","hash":"bce37d066ffa82f3e249d41d0ee883c913cc2c5f","modified":1524237847597},{"_id":"themes/material/languages/en.yml","hash":"b59136a1b4d0a77e550b0e7e2e430cac44230dd3","modified":1524237847597},{"_id":"themes/material/languages/es.yml","hash":"d35f5411bc87277cc2d3a58d9499ddb9cfd46f1b","modified":1524237847597},{"_id":"themes/material/languages/fr.yml","hash":"f456cf31a72d97f2f18e3bb6cf735285d2b9d2c5","modified":1524237847598},{"_id":"themes/material/languages/ja.yml","hash":"768b8330c9c73287efd475e68741ce4ebad29fd1","modified":1524237847598},{"_id":"themes/material/languages/ms.yml","hash":"237a39bbfcce33e7b918f6c5dc0f01bc79900262","modified":1524237847599},{"_id":"themes/material/languages/nl_NL.yml","hash":"b71e59807716185627d6b9b84e44a79401df639f","modified":1524237847597},{"_id":"themes/material/languages/pt-BR.yml","hash":"a070c2c4d0d3d54f8ca70513cff73c3f7c306db1","modified":1524237847596},{"_id":"themes/material/languages/ru.yml","hash":"fbff2cf48dbde45adcad781e2fd6c30b523a4ac1","modified":1524237847598},{"_id":"themes/material/languages/zh-CN.yml","hash":"c0baa69b6df599e8b397b85d17e67374f5d49c3e","modified":1524237847599},{"_id":"themes/material/languages/zh-TW.yml","hash":"ec55953f0330f81bf1ffb37ff34de258dfda642a","modified":1524237847599},{"_id":"themes/material/layout/index.ejs","hash":"aca1abb741f891776913c8ea2e6ff626a0ea5736","modified":1524237847532},{"_id":"themes/material/layout/layout.ejs","hash":"94f66850b815a262c0f8ff112a32a0a6f43066e3","modified":1524237847533},{"_id":"themes/material/layout/post.ejs","hash":"4dd572a9e84f3a6baa5e3f16d270e58e3cd31a23","modified":1524237847532},{"_id":"themes/material/scripts/helper.js","hash":"e7111a8b1f0ab5bf3466378c48c260a4f6e527d6","modified":1524237847604},{"_id":"themes/material/source/.DS_Store","hash":"6a751af3fc4ed7a4b6bd3d267e0adb53ddffabbc","modified":1524237847552},{"_id":"themes/material/layout/_partial/Isolation-post-info.ejs","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1524237847539},{"_id":"themes/material/scripts/lib/font_lsload.js","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1524237847602},{"_id":"source/_posts/想开个-ES6-的坑/promise.png","hash":"6ee3f072dbb90940644c141bc1bb8a604b449ae1","modified":1524238201344},{"_id":"themes/material/_git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1524237847629},{"_id":"themes/material/_git/hooks/applypatch-msg.sample","hash":"4de88eb95a5e93fd27e78b5fb3b5231a8d8917dd","modified":1524237847630},{"_id":"themes/material/_git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1524237847631},{"_id":"themes/material/_git/hooks/pre-applypatch.sample","hash":"f208287c1a92525de9f5462e905a9d31de1e2d75","modified":1524237847632},{"_id":"themes/material/_git/hooks/pre-commit.sample","hash":"36aed8976dcc08b5076844f0ec645b18bc37758f","modified":1524237847630},{"_id":"themes/material/_git/hooks/pre-push.sample","hash":"5c8518bfd1d1d3d2c1a7194994c0a16d8a313a41","modified":1524237847632},{"_id":"themes/material/_git/hooks/pre-rebase.sample","hash":"288efdc0027db4cfd8b7c47c4aeddba09b6ded12","modified":1524237847630},{"_id":"themes/material/_git/hooks/pre-receive.sample","hash":"705a17d259e7896f0082fe2e9f2c0c3b127be5ac","modified":1524237847631},{"_id":"themes/material/_git/hooks/prepare-commit-msg.sample","hash":"2584806ba147152ae005cb675aa4f01d5d068456","modified":1524237847631},{"_id":"themes/material/_git/hooks/update.sample","hash":"e729cd61b27c128951d139de8e7c63d1a3758dde","modified":1524237847632},{"_id":"themes/material/_git/info/exclude","hash":"bb5a85730dcf100facee799c05cc4f6affec0745","modified":1524237847626},{"_id":"themes/material/_git/logs/HEAD","hash":"17aed79bba91b4b55a3d37bcd9de34975abdf8a8","modified":1524237847626},{"_id":"themes/material/layout/_partial/Isolation-post_entry.ejs","hash":"134dc82320b7aed7d4d78960be63e16c5c4a30fb","modified":1524237847534},{"_id":"themes/material/layout/_partial/Paradox-post-info.ejs","hash":"125cfa5cd9e6e1ca5e958026fdd42f3c3141e34f","modified":1524237847538},{"_id":"themes/material/layout/_partial/Paradox-post-thumbnail.ejs","hash":"6f1e9a85c089ce98a36a2954839fb9ce3e53739e","modified":1524237847534},{"_id":"themes/material/layout/_partial/Paradox-post_entry-thumbnail.ejs","hash":"4d740eba338517d4e10d011a157cdefad45a8e1f","modified":1524237847534},{"_id":"themes/material/layout/_partial/Paradox-post_entry.ejs","hash":"5f4d67e5bd70f635203706cf344b036d891073e6","modified":1524237847537},{"_id":"themes/material/layout/_partial/Paradox-search.ejs","hash":"18a6971b04feccd124a096b8c7cecf1fd4bb914e","modified":1524237847539},{"_id":"themes/material/layout/_partial/blog_info.ejs","hash":"5e95796e6f9a81163554ca4198573860f7328d4e","modified":1524237847540},{"_id":"themes/material/layout/_partial/comment.ejs","hash":"c9fb1f98a18ca484cb52d60e2ad2bad25b56dfb2","modified":1524237847538},{"_id":"themes/material/layout/_partial/config_css.ejs","hash":"2b1e27faa0446a5e756e61ddf3e969e50948f1ce","modified":1524237847535},{"_id":"themes/material/layout/_partial/config_font.ejs","hash":"730abeb681758ce288d5541930c46bc4b041a0b1","modified":1524237847539},{"_id":"themes/material/layout/_partial/daily_pic.ejs","hash":"e780fbdb79b5e27091c408545cfd5b64892c9b01","modified":1524237847540},{"_id":"themes/material/layout/_partial/footer-left.ejs","hash":"8ff324357af95a0245228e92eee3d461d930edb4","modified":1524237847539},{"_id":"themes/material/layout/_partial/footer-option.ejs","hash":"be20394eaeaf2d20db28946b948962c839da6ea9","modified":1524237847533},{"_id":"themes/material/layout/_partial/footer.ejs","hash":"530626c347882579d09d71df68993e25076ca8e2","modified":1524237847537},{"_id":"themes/material/layout/_partial/footer_top.ejs","hash":"9eaace4feb951c96c0033e7271497f3f300d2476","modified":1524237847535},{"_id":"themes/material/layout/_partial/head.ejs","hash":"8167f995c7cc21a6a8ddbfbdd03f2f74a7bd904d","modified":1524237847537},{"_id":"themes/material/layout/_partial/import_js.ejs","hash":"0c5145dff4ebcf9538ae0a1a37c8bdda6783c8a7","modified":1524237847536},{"_id":"themes/material/layout/_partial/isolate-sns_list.ejs","hash":"d0ea4526f346bb9883566796f157d80446771b59","modified":1524237847541},{"_id":"themes/material/layout/_partial/isolate_info.ejs","hash":"b8ec76716bfa2e6513b4df6814fe8676536a94c1","modified":1524237847533},{"_id":"themes/material/layout/_partial/post-content.ejs","hash":"ad626e3b60bc4a17bacff02cf9b0a8beaba2ad1e","modified":1524237847541},{"_id":"themes/material/layout/_partial/post-header.ejs","hash":"b0b8973c48db6376a24d4b4b1d2eb15d18d6508c","modified":1524237847538},{"_id":"themes/material/layout/_partial/post-info-share.ejs","hash":"9f28d62bf728c2bd89411688426a65d7ee55400c","modified":1524237847535},{"_id":"themes/material/layout/_partial/post-nav.ejs","hash":"3b6d4568cc46f60c697ad9ec85a4aa5971f3eecc","modified":1524237847536},{"_id":"themes/material/layout/_partial/sidebar-footer.ejs","hash":"6c3486b846473e0d58666f7a8720f5bf4a14e030","modified":1524237847540},{"_id":"themes/material/layout/_partial/sidebar-footer_image.ejs","hash":"b9157d2072028a1db3c3419f76bde6637e85cf0e","modified":1524237847534},{"_id":"themes/material/layout/_partial/sidebar-header.ejs","hash":"06295e01092f55504d30a343c3fdc5091280e495","modified":1524237847538},{"_id":"themes/material/layout/_partial/sidebar-navigation.ejs","hash":"ff44901fdfdd952174b0d22e86df7163d7fba9ba","modified":1524237847534},{"_id":"themes/material/layout/_partial/sidebar.ejs","hash":"c5ce6136e82895cb80dab8a918a7cdf2fe820fea","modified":1524237847541},{"_id":"themes/material/layout/_partial/structured-data.ejs","hash":"e845df290185dc300cc4edcc08b50fddc5b6909b","modified":1524237847536},{"_id":"themes/material/layout/_partial/toc_button.ejs","hash":"688c3fc12e2548ff27fe60688f79dcce2881fd50","modified":1524237847540},{"_id":"themes/material/layout/_widget/dnsprefetch.ejs","hash":"5e4c5359d69a64042183db13f6dd771b1f7f6b31","modified":1524237847543},{"_id":"themes/material/layout/_widget/leancloud-like.ejs","hash":"e4780fe3bbb049db38d694fc18dee13d799bd51d","modified":1524237847542},{"_id":"themes/material/layout/_widget/leancloud-views.ejs","hash":"211dc183b8e84f71b2c25b3ac6659d162d81662b","modified":1524237847550},{"_id":"themes/material/layout/_widget/leancloud-views_num.ejs","hash":"e27baba6a2de406463735d276606b15fb40f5eba","modified":1524237847542},{"_id":"themes/material/layout/_widget/mathjax.ejs","hash":"b68befe1fea84739c8429c344e570a8bc0357401","modified":1524237847542},{"_id":"themes/material/layout/_widget/nprogress.ejs","hash":"901a64600854b312209287c702278183600e06b9","modified":1524237847541},{"_id":"themes/material/layout/_widget/page-gallery.ejs","hash":"81b9410deef7a83ef5bc7cd18ad042df70d70b94","modified":1524237847549},{"_id":"themes/material/layout/_widget/page-links.ejs","hash":"0ebe18e4326f921d6010df8479a08c2d403ba717","modified":1524237847551},{"_id":"themes/material/layout/_widget/page-tagcloud.ejs","hash":"e71de74e4067cc4e6aef1e09ac429c92bcd178b3","modified":1524237847550},{"_id":"themes/material/layout/_widget/page-timeline.ejs","hash":"9fa0195e08d9fd40aa0333e9279c98bc65acf604","modified":1524237847549},{"_id":"themes/material/layout/_widget/qrcode.ejs","hash":"3212e5d29fe8490c5d9a844ec9c2ce9925532de8","modified":1524237847542},{"_id":"themes/material/layout/_widget/search-local-js.ejs","hash":"f42cc040adf47fc7d74f64b0be3c3230e8a3339e","modified":1524237847550},{"_id":"themes/material/layout/_widget/search-swiftype-js.ejs","hash":"7ad1e843e620ccd9b3c041dccfdcee97921247a1","modified":1524237847550},{"_id":"themes/material/scripts/lib/css_lsload.js","hash":"179f5f5e3297a7fb7d90545ddd94eb468a11046e","modified":1524237847602},{"_id":"themes/material/scripts/lib/get_file_hex.js","hash":"eb3b9a45f8ca45ef40d5421baef7d4484023982c","modified":1524237847603},{"_id":"themes/material/scripts/lib/js_hex.js","hash":"2704583aa036d538544ce31c2e924c0c125309dd","modified":1524237847602},{"_id":"themes/material/scripts/lib/js_lsload.js","hash":"72f885b13fe0028a0e2acb7168dcc66e39ea1592","modified":1524237847603},{"_id":"themes/material/scripts/lib/path_for.js","hash":"f944e3b53a468962121aa3357cc0bc18ac27a34c","modified":1524237847603},{"_id":"themes/material/source/css/disqus-proxy.css","hash":"770776d8cec27cd5661bdfd59eff9af263439989","modified":1524237847566},{"_id":"themes/material/source/css/disqus-proxy.min.css","hash":"3f8f99f71d361302288b0ba11fd36072564b08c2","modified":1524237847553},{"_id":"themes/material/source/css/duoshuo.css","hash":"32a02eaa01ff7b66fd9df307b0d33d52810096be","modified":1524237847565},{"_id":"themes/material/source/css/duoshuo.min.css","hash":"89a30544b8b01d061da51c40f2af702a7969de5e","modified":1524237847555},{"_id":"themes/material/source/css/fontawesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1524237847555},{"_id":"themes/material/source/css/ie-blocker.css","hash":"dddce7e6250a449291888ae7865697282a213b14","modified":1524237847555},{"_id":"themes/material/source/css/gallery.min.css","hash":"c5333ca835aae49239d809130a7b281af745729e","modified":1524237847553},{"_id":"themes/material/source/css/material-icons.css","hash":"f6f95fe5190f3c65931847246621fb83754eb00c","modified":1524237847554},{"_id":"themes/material/source/css/prettify.css","hash":"c395f20ee64e80c2b6b15c7dade02f9aaaeab2c8","modified":1524237847555},{"_id":"themes/material/source/css/prettify.min.css","hash":"62edd8f08656463b0e077dcf893faa3cc8eb5fe4","modified":1524237847554},{"_id":"themes/material/source/css/uc.css","hash":"1e0977a2c9bdf721cc05654dfc025dd250655852","modified":1524237847554},{"_id":"themes/material/source/fonts/MaterialIcons-Regular.woff","hash":"c6c953c2ccb2ca9abb21db8dbf473b5a435f0082","modified":1524237847591},{"_id":"themes/material/source/fonts/MaterialIcons-Regular.woff2","hash":"09963592e8c953cc7e14e3fb0a5b05d5042e8435","modified":1524237847590},{"_id":"themes/material/source/img/.DS_Store","hash":"6c5688b70cccc65c7db724d48d3dc94aadfdb237","modified":1524237847575},{"_id":"themes/material/source/img/avatar.png","hash":"bf483b0d495dbbcfb308348a945818e1c1cc9696","modified":1524237847577},{"_id":"themes/material/source/img/bg.png","hash":"a32f9717e19e821a4030ade551dc2917c889fcd8","modified":1524237847587},{"_id":"themes/material/source/img/browserstack_logo.png","hash":"a6c43887f64a7f48a2814e3714eaa1215e542037","modified":1524237847575},{"_id":"themes/material/source/img/sidebar_header.png","hash":"c47f4d39f421c0a950279d050ae82f9ae6dd19ff","modified":1524237847578},{"_id":"themes/material/source/img/upyun_logo.svg","hash":"1f118b2b9c54f431d5e731ccf316ceefe605ba67","modified":1524237847586},{"_id":"themes/material/source/js/Valine.min.js","hash":"6a287a99a772a0ea8f98b133523429c9250cc67f","modified":1524237847569},{"_id":"themes/material/source/js/MathJax.js","hash":"a21703b5848325a902c9b39bbf3ca6490d3e1b1b","modified":1524237847568},{"_id":"themes/material/source/js/hanabi-browser-bundle.js","hash":"d646647bda386140c8315d60e3ff4ddbdb15c1ea","modified":1524237847569},{"_id":"themes/material/source/js/ie-blocker.en.js","hash":"96ca8e677a12048d099319ebdf01983ddc6ca80c","modified":1524237847569},{"_id":"themes/material/source/js/ie-blocker.zhCN.js","hash":"0ed49b0ec1d1924b128fbd97fca2cf7af7856fdf","modified":1524237847567},{"_id":"themes/material/source/js/lazyload.min.js","hash":"5348fd7aa4dbefac9d21091c9fd5e263563b5540","modified":1524237847567},{"_id":"themes/material/source/js/lsloader.js","hash":"2b14e57784fb6b5f58d71584189c61af45f393e8","modified":1524237847571},{"_id":"themes/material/source/js/lsloader.min.js","hash":"1a68a8d267948ea8475245b7d365a1a1bd8f732e","modified":1524237847570},{"_id":"themes/material/source/js/nprogress.js","hash":"a3058d4b6afb5d7a14e5afcbb88f778de35864f0","modified":1524237847571},{"_id":"themes/material/source/js/prettify.min.js","hash":"69908fe0a09cee107c25cb5d769b861723e7b7bb","modified":1524237847567},{"_id":"themes/material/source/js/queue.js","hash":"dd252616b568b71c222d9cfc859bfe52738e576a","modified":1524237847569},{"_id":"themes/material/source/js/queue.min.js","hash":"21aab782ca33efbb1386cc960b6be0a02106760d","modified":1524237847571},{"_id":"themes/material/source/js/smoothscroll.js","hash":"df56a1c84191a62750ae820943377b6775fca0e2","modified":1524237847566},{"_id":"themes/material/source/css/material.css","hash":"068e2b00f686157b6e8b78b9b808112adbedf4de","modified":1524237847554},{"_id":"themes/material/source/css/material.min.css","hash":"1a19febb9214ab689b02f5bb8ccb23579e6c1181","modified":1524237847556},{"_id":"themes/material/source/css/style.css","hash":"7b0d53a268542fc097d82b9d33150fc0eebec917","modified":1524237847556},{"_id":"themes/material/source/css/style.min.css","hash":"960b235f39556a061787e4453b639f2cd8afbf13","modified":1524237847553},{"_id":"themes/material/source/fonts/MaterialIcons-Regular.ttf","hash":"fc05de31234e0090f7ddc28ce1b23af4026cb1da","modified":1524237847592},{"_id":"themes/material/source/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1524237847591},{"_id":"themes/material/source/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1524237847592},{"_id":"themes/material/source/img/avatar.jpeg","hash":"6854552c6893792c71e585bc70edad561e3cbb10","modified":1524237847586},{"_id":"themes/material/source/img/daily_pic.png","hash":"5e9a5f6a134889d0242e69061837f2032416d7ce","modified":1524237847586},{"_id":"themes/material/source/js/jquery.min.js","hash":"00073d6597d2760b81387274a9ec56b9d5cb1552","modified":1524237847570},{"_id":"themes/material/source/js/js.js","hash":"64b3f20e7138674ecf21e6e3982565ea63feae26","modified":1524237847566},{"_id":"themes/material/source/js/js.min.js","hash":"709d347d3be033b841de0493b7cf532b594bb1f6","modified":1524237847571},{"_id":"themes/material/_git/objects/02/6e9d27a1894b4c9200134e14232582e9247928","hash":"8b89e733f8f6f2ce28e6708fc978a2df5e8cb0c6","modified":1524237847608},{"_id":"themes/material/_git/objects/07/2ccc320290ab8256a16e03250bb57eb78c47bc","hash":"b706dd0616508d7d81dfd246b4d6a9f7e70418c1","modified":1524237847620},{"_id":"themes/material/_git/objects/30/f55796624b97e6a9d5108abc6f874f664c22b0","hash":"2f0489e060321f939782de023a7a58a214391613","modified":1524237847622},{"_id":"themes/material/_git/objects/4b/bdfd18a934617be8413cfaa30d608d1f740ac0","hash":"e3fd56a5271fcf0780e625c5511ee2d1c133c384","modified":1524237847609},{"_id":"themes/material/_git/objects/5b/54a3496d4679c8cdcf5aac2ea0bd33feb2c43e","hash":"00a3a5b962fda730a659ffea91a68d92342d5eac","modified":1524237847622},{"_id":"themes/material/_git/objects/8e/e710b0d34f9dd3f52206d8d1c6c17515b23001","hash":"63e55b7541ba0503fbab0af82af4989591c2bf83","modified":1524237847625},{"_id":"themes/material/_git/objects/91/ed4413ede0201e16e2044081e5df77ef1da721","hash":"dd6f7359d16be8824a7af633acc6332d4991d67b","modified":1524237847621},{"_id":"themes/material/_git/objects/9e/8dd2da74b347d7eb6b48348c9e21c810caa70a","hash":"72180ec4a4e37dd2cea04d4c21c2c58fdf738f86","modified":1524237847606},{"_id":"themes/material/_git/objects/8a/b18d6ba87c151d46a590c59e46673ee5ba5291","hash":"3a5b47a3ff68aae71e57c597ea618ba2edb3f699","modified":1524237847619},{"_id":"themes/material/_git/objects/bb/91143846b5d712f1842e2c571f97e8d5b8fbc3","hash":"b0ed8745b9b7c8dae5bc78cb34001f95d3b506c8","modified":1524237847608},{"_id":"themes/material/_git/objects/c2/94b13f03275252b07f428b6c054215b1d36771","hash":"ea732a412957699568256a29743afd825bb7a246","modified":1524237847624},{"_id":"themes/material/_git/objects/ef/7744a31df1684eda93f8e2370b546ed34caac9","hash":"8bb74f2576df1b2617c412e2c07f2e14b508aeb3","modified":1524237847623},{"_id":"themes/material/_git/refs/heads/master","hash":"6b7dde23563c4c50a69d7a5382217a92953defd6","modified":1524237847676},{"_id":"themes/material/layout/_widget/analytics/baidu-analytics.ejs","hash":"3866a7fead3c1f94a517f1f9d629f092670b1520","modified":1524237847551},{"_id":"themes/material/layout/_widget/analytics/cnzz-analytics.ejs","hash":"1765e3dcd92961292f40d1812e593186c77b17ef","modified":1524237847551},{"_id":"themes/material/layout/_widget/analytics/google-analytics.ejs","hash":"3b10ebf524baf0c24b22dcd110b39d15c5acb9b5","modified":1524237847551},{"_id":"themes/material/source/css/prettify/atelier-cave-dark.min.css","hash":"cb0156cdc36500a26b232ae1c81fdc880eba85e7","modified":1524237847564},{"_id":"themes/material/source/css/prettify/atelier-cave-light.min.css","hash":"4b62dc45aa351b071d6a434dc54fe8c2e15c85cc","modified":1524237847563},{"_id":"themes/material/source/css/prettify/atelier-dune-dark.min.css","hash":"c5094d99ca0e619d97860c88211bf908fdf830b1","modified":1524237847559},{"_id":"themes/material/source/css/prettify/atelier-dune-light.min.css","hash":"b3ad98483e4d5bde72d52a15423d98e0d086db09","modified":1524237847565},{"_id":"themes/material/source/css/prettify/atelier-estuary-dark.min.css","hash":"7e3a065cafeb3acc1d7178f64ef4265f5d5ad2b9","modified":1524237847565},{"_id":"themes/material/source/css/prettify/atelier-estuary-light.min.css","hash":"1d12d8f7fa9c122a186ee76fdf681c191a68f104","modified":1524237847559},{"_id":"themes/material/source/css/prettify/atelier-forest-dark.min.css","hash":"9296b851a5b66785a60afa5da5fe9080bda96bf5","modified":1524237847561},{"_id":"themes/material/source/css/prettify/atelier-forest-light.min.css","hash":"3532f6e86bf4afbba05f7a074b791b73174f9622","modified":1524237847562},{"_id":"themes/material/source/css/prettify/atelier-heath-dark.min.css","hash":"954309acd7918422382a3ff2f9c2988aec0ff956","modified":1524237847558},{"_id":"themes/material/source/css/prettify/atelier-heath-light.min.css","hash":"a67199fa580b3aa2df031e5d2028929d29ca3b45","modified":1524237847559},{"_id":"themes/material/source/css/prettify/atelier-lakeside-dark.min.css","hash":"18575fc6dff855e395a39d0383d2f18807091f0d","modified":1524237847561},{"_id":"themes/material/source/css/prettify/atelier-lakeside-light.min.css","hash":"e20e8ac64432fa1aa6f74792b58196af7cf79c12","modified":1524237847565},{"_id":"themes/material/source/css/prettify/atelier-plateau-dark.min.css","hash":"137e3c499a720da3c1d57b4dc53264b1d623e1c5","modified":1524237847563},{"_id":"themes/material/source/css/prettify/atelier-plateau-light.min.css","hash":"153801640fdcbb74c0de3f15345110f2210eb991","modified":1524237847557},{"_id":"themes/material/source/css/prettify/atelier-savanna-dark.min.css","hash":"fba92c652fd6704422b8f2bbc11706805a6faed0","modified":1524237847560},{"_id":"themes/material/source/css/prettify/atelier-savanna-light.min.css","hash":"d9425ffb7c60d646190c22b9a5f72091ee5f9ace","modified":1524237847564},{"_id":"themes/material/source/css/prettify/atelier-seaside-dark.min.css","hash":"e0e6bbacc75a349b1e49c236d374b0e42f1fd485","modified":1524237847557},{"_id":"themes/material/source/css/prettify/atelier-seaside-light.min.css","hash":"732750b75389c1c49204f37705e6abeee40ce64f","modified":1524237847560},{"_id":"themes/material/source/css/prettify/atelier-sulphurpool-dark.min.css","hash":"015a35dddaee153fa8bb71d7f3818a6ba4d120d8","modified":1524237847557},{"_id":"themes/material/source/css/prettify/atelier-sulphurpool-light.min.css","hash":"ab1a6200eab648cab443c3df77fde9b237ef27b6","modified":1524237847563},{"_id":"themes/material/source/css/prettify/github-v2.min.css","hash":"57630621d20842a529bdea7b17fc90f520e562ef","modified":1524237847563},{"_id":"themes/material/source/css/prettify/github.min.css","hash":"19cf828225288fa5c006f1d8f66c39d11f4ef7f2","modified":1524237847562},{"_id":"themes/material/source/css/prettify/hemisu-dark.min.css","hash":"a671248cfd573292026d2174817e82e593691052","modified":1524237847562},{"_id":"themes/material/source/css/prettify/hemisu-light.min.css","hash":"b2556ff41e513fd13d032ec84a37ee260a905815","modified":1524237847565},{"_id":"themes/material/source/css/prettify/tomorrow-night-blue.min.css","hash":"c442728d96485bcf816151fe6bd96993aae09852","modified":1524237847557},{"_id":"themes/material/source/css/prettify/tomorrow-night-bright.min.css","hash":"cf251fd3edfd736695272a0f1b41d509b7bb1fb9","modified":1524237847564},{"_id":"themes/material/source/css/prettify/tomorrow-night-eighties.min.css","hash":"6ce259d674bb4edda23eea32b2379be17d0e0e6e","modified":1524237847560},{"_id":"themes/material/source/css/prettify/tomorrow-night.min.css","hash":"d989206d124035494acb4b0cdc7fbc89f3b7d108","modified":1524237847561},{"_id":"themes/material/source/css/prettify/tomorrow.min.css","hash":"b2c6d610b77f0273fefab5aa4ad26a7f58956f87","modified":1524237847562},{"_id":"themes/material/source/css/prettify/tranquil-heart.min.css","hash":"0f6eefbdda8e410832e9c516a5dd19899217ef06","modified":1524237847559},{"_id":"themes/material/source/css/prettify/vibrant-ink.min.css","hash":"c265bac6c31cf622b536b29c8a6bc46955d6fe63","modified":1524237847558},{"_id":"themes/material/source/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1524237847590},{"_id":"themes/material/source/fonts/MaterialIcons-Regular.eot","hash":"26fb8cecb5512223277b4d290a24492a0f09ede1","modified":1524237847594},{"_id":"themes/material/source/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1524237847593},{"_id":"themes/material/source/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1524237847592},{"_id":"themes/material/source/img/footer/footer_ico-bilibili.svg","hash":"1a007ae30d69aa597f589edb4ee0638a9814c988","modified":1524237847573},{"_id":"themes/material/source/img/footer/footer_ico-facebook.svg","hash":"74b3b3c6bd1d76b7eaaf75d36ac929b11a5a3e82","modified":1524237847575},{"_id":"themes/material/source/img/footer/footer_ico-github.svg","hash":"5f1f9f53e6a87ad674108c6bd16e424a1e888c61","modified":1524237847573},{"_id":"themes/material/source/img/footer/footer_ico-gplus.svg","hash":"b50274133ab263bcacdf729871d0446b615ac984","modified":1524237847574},{"_id":"themes/material/source/img/footer/footer_ico-instagram.svg","hash":"294c511e62063ea49f61e23958ab27d643ba0228","modified":1524237847572},{"_id":"themes/material/source/img/footer/footer_ico-telegram.svg","hash":"413d66e40ca476deeb49364935d49d2f7839cdfd","modified":1524237847573},{"_id":"themes/material/source/img/footer/footer_ico-linkedin.svg","hash":"9831c86352ec5ff283a3277d033120f86388c277","modified":1524237847575},{"_id":"themes/material/source/img/footer/footer_ico-tumblr.svg","hash":"11daf4fa4220787306fc21a879429e98b7db8d03","modified":1524237847573},{"_id":"themes/material/source/img/footer/footer_ico-twitter.svg","hash":"58df7777d6fcee8fa3c42453c091714bb3f97c95","modified":1524237847572},{"_id":"themes/material/source/img/footer/footer_ico-v2ex.svg","hash":"c5ffaf67a97e534c266d1585a9a3b56f1bfe3052","modified":1524237847574},{"_id":"themes/material/source/img/footer/footer_ico-weibo.svg","hash":"26d0cdb77f0c4afd60111176167eacfa222bc4c1","modified":1524237847574},{"_id":"themes/material/source/img/footer/footer_ico-zhihu.svg","hash":"d3f8da320fffefc5144822665dfe17d25af4061c","modified":1524237847573},{"_id":"themes/material/source/img/gallery/arrow.svg","hash":"144d73877e52acc5068bc0c9d1e69ef450e69f26","modified":1524237847576},{"_id":"themes/material/source/img/gallery/close.svg","hash":"2690088060811f01c9360df75be80070156ff176","modified":1524237847576},{"_id":"themes/material/source/img/gallery/spinner.svg","hash":"fc9d1cd1118ac896d4f5326e110a653f3ea32b11","modified":1524237847577},{"_id":"themes/material/source/img/random/material-10.png","hash":"363466a376e4df9e61acc904cd25f3c7ae1a7280","modified":1524237847584},{"_id":"themes/material/source/img/random/material-12.png","hash":"d020b3d42542715c7ae95b3d8603fe3180bfe8f3","modified":1524237847584},{"_id":"themes/material/source/img/random/material-17.png","hash":"ece82810e31f711576db598c845c3d97bd49fe67","modified":1524237847582},{"_id":"themes/material/source/img/random/material-19.png","hash":"768ed1a4966e2e418cb00f6b36d2fc9058328eb3","modified":1524237847582},{"_id":"themes/material/source/img/random/material-3.png","hash":"848eaa70b9b0cd7a2204c78e8aa324d8f96bb097","modified":1524237847579},{"_id":"themes/material/source/img/random/material-4.png","hash":"b475dfbf67a076a4e17a5527fd1973b1d4adac07","modified":1524237847581},{"_id":"themes/material/source/img/random/material-6.png","hash":"2f841e0c064fecb607ad1e149662a0c96d9e725d","modified":1524237847580},{"_id":"themes/material/source/img/random/material-8.png","hash":"57db542d526ef6866cb34e261096e93a0e6f3a82","modified":1524237847585},{"_id":"themes/material/source/img/random/material-9.png","hash":"840319c4d1f38fb8df79eb4669ed2e14d89fd680","modified":1524237847585},{"_id":"themes/material/source/js/gallery/gallery.js","hash":"8ee48312a183b42a9886211a0ec825ea0d041301","modified":1524237847568},{"_id":"themes/material/_git/objects/bf/b02a7af86ffe564d907cdbb5ac2fef4f840962","hash":"f74d56133892c9154f5589b9e4bcc2ecf0fb5d8a","modified":1524237847623},{"_id":"themes/material/layout/_widget/comment/valine/common.ejs","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1524237847546},{"_id":"themes/material/layout/_widget/comment/livere/common.ejs","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1524237847544},{"_id":"themes/material/source/img/favicon.png","hash":"e283c968860f170023c03416063d48cbf792832b","modified":1524237847577},{"_id":"themes/material/source/img/random/material-1.png","hash":"4839299eaa4db7272befa7b824e54b647fbbfc44","modified":1524237847579},{"_id":"themes/material/source/img/logo.png","hash":"e283c968860f170023c03416063d48cbf792832b","modified":1524237847578},{"_id":"themes/material/source/img/random/material-11.png","hash":"ce20b0ad08a248c036115374f2edb7301ff60b72","modified":1524237847584},{"_id":"themes/material/source/img/random/material-13.png","hash":"1a8378db3121b583485e2b939cb1aa0e0b14b0c8","modified":1524237847585},{"_id":"themes/material/source/img/random/material-14.png","hash":"b4f65b601960138c69f57171b0ddd55895483f45","modified":1524237847583},{"_id":"themes/material/source/img/random/material-15.png","hash":"36b9937cf3810e4970902b78797ad29b0831f065","modified":1524237847583},{"_id":"themes/material/source/img/random/material-16.png","hash":"ade7f75200d3fb38326e3cf1e9f1a812fb12a43b","modified":1524237847583},{"_id":"themes/material/source/img/random/material-18.png","hash":"4b98204abe36ecd3f30678d2c22059130e0db328","modified":1524237847582},{"_id":"themes/material/source/img/random/material-2.png","hash":"faba2ce69c19d6c1dac392dd10b054e0061f6fb7","modified":1524237847580},{"_id":"themes/material/source/img/random/material-5.png","hash":"5041ebd073a139c67f8ed271e74c967c7eb9c5be","modified":1524237847581},{"_id":"themes/material/source/img/random/material-7.png","hash":"5c49ff3c064aaeb21227c2bd98b5ae422ddca84c","modified":1524237847581},{"_id":"themes/material/_git/logs/refs/heads/master","hash":"17aed79bba91b4b55a3d37bcd9de34975abdf8a8","modified":1524237847627},{"_id":"themes/material/_git/objects/pack/pack-cc785c4e6e0562cbf78446081b0ca877f893f8ec.idx","hash":"862716a576f91332424401e5681af6acf6624848","modified":1524237847609},{"_id":"themes/material/_git/refs/remotes/origin/HEAD","hash":"d9427cda09aba1cdde5c69c2b13c905bddb0bc51","modified":1524237847677},{"_id":"themes/material/layout/_widget/comment/changyan/common.ejs","hash":"40e1fc76d6b7f64e226693fb2fe1a6bb17bae245","modified":1524237847545},{"_id":"themes/material/layout/_widget/comment/changyan/enter.ejs","hash":"e3cfb4f37ea35457f112f3e822e130c930086497","modified":1524237847545},{"_id":"themes/material/layout/_widget/comment/changyan/main.ejs","hash":"77539ff32cc9d1204b848e01b5277fff5cbd61e0","modified":1524237847545},{"_id":"themes/material/layout/_widget/comment/disqus/common.ejs","hash":"c11cfceb0906a96399dede5da01ff7fe4787f8a5","modified":1524237847549},{"_id":"themes/material/layout/_widget/comment/disqus/enter.ejs","hash":"39192034766349e47967da63184f9104fdded2ab","modified":1524237847549},{"_id":"themes/material/layout/_widget/comment/disqus/main.ejs","hash":"21e0eeff664191b818d7a0071ae7edcdfc270442","modified":1524237847548},{"_id":"themes/material/layout/_widget/comment/disqus_click/common.ejs","hash":"d243f576b366a62191066459efcc6fd0ab79d00a","modified":1524237847547},{"_id":"themes/material/layout/_widget/comment/disqus_click/enter.ejs","hash":"d82f0296f8bae25223ec44e6e05b817d3a234884","modified":1524237847547},{"_id":"themes/material/layout/_widget/comment/disqus_click/main.ejs","hash":"f53de208ca46c669a868a1922488e39509c6fe3b","modified":1524237847547},{"_id":"themes/material/layout/_widget/comment/gitalk/common.ejs","hash":"f739897518011e1b3de7807c8c5d734984711282","modified":1524237847544},{"_id":"themes/material/layout/_widget/comment/gitalk/enter.ejs","hash":"4d70d76465469a57def29a221962a5520fb34ebe","modified":1524237847544},{"_id":"themes/material/layout/_widget/comment/gitalk/main.ejs","hash":"1ee7a7b2b9b5ae8c4fa8c4b09c7973b9e085bdf2","modified":1524237847544},{"_id":"themes/material/layout/_widget/comment/gitment/common.ejs","hash":"9c6c8d1b448c32afb01c2d0351e87f4d4a17ec3c","modified":1524237847548},{"_id":"themes/material/layout/_widget/comment/gitment/enter.ejs","hash":"46d904fde9233694b95c6a3d91b9a2b7a6805850","modified":1524237847548},{"_id":"themes/material/layout/_widget/comment/gitment/main.ejs","hash":"e622660eda38cda05847aadc2a3e31a228fc519b","modified":1524237847548},{"_id":"themes/material/layout/_widget/comment/valine/enter.ejs","hash":"ab528aad46237d9e7f1c5b4b2b310dd628b2de63","modified":1524237847546},{"_id":"themes/material/layout/_widget/comment/valine/main.ejs","hash":"3d5d8559e6ad4ffb58a61d96439b2718eb9999b6","modified":1524237847546},{"_id":"themes/material/layout/_widget/comment/livere/enter.ejs","hash":"194b7bb581a3b8608a7ab135b6953d7908f51cc8","modified":1524237847543},{"_id":"themes/material/layout/_widget/comment/livere/main.ejs","hash":"1c4be9ba104a8cbcc11d45f11bf8cfe7704b93a5","modified":1524237847543},{"_id":"themes/material/_git/objects/32/e8cd3ad933a67c4baec37c157b971c18feeada","hash":"03141ce4c4185ee6191c0b5ca2bcf8dbd9599c80","modified":1524237847607},{"_id":"themes/material/_git/logs/refs/remotes/origin/HEAD","hash":"3aa6076bd3c202c51d2749f0f9279856e8960132","modified":1524237847628},{"_id":"themes/material/source/fonts/fontawesome-webfont.svg","hash":"98a8aa5cf7d62c2eff5f07ede8d844b874ef06ed","modified":1524237847588},{"_id":"themes/material/source/fonts/Roboto-Black.ttf","hash":"0244e6497a51fb8a38ca7e6fe297b066e2e09af5","modified":1524237847595},{"_id":"themes/material/source/fonts/Roboto-Bold.ttf","hash":"d1864343b543978bd491d40c80010cea50c1b7bf","modified":1524237847593},{"_id":"themes/material/source/fonts/Roboto-Light.ttf","hash":"b9ea2eaf26ff8fdcb5aee3e0c2c7a6084ebb6aac","modified":1524237847589},{"_id":"themes/material/source/fonts/Roboto-Medium.ttf","hash":"3965419aab480c184f66bc5e39c1719a373a4ef6","modified":1524237847588},{"_id":"themes/material/source/fonts/Roboto-Regular.ttf","hash":"06691e103d4d3ce1f1108d9b7d21254b714a41f8","modified":1524237847590},{"_id":"themes/material/source/fonts/Roboto-Thin.ttf","hash":"ed5101c3a800f35e925603a406e0c2dc5278b96c","modified":1524237847594},{"_id":"source/_posts/青岛？/浪花.jpeg","hash":"a8a9db04d0337feca9fc2f02752c63dad0a29b4a","modified":1525186904419},{"_id":"themes/material/_git/objects/pack/pack-cc785c4e6e0562cbf78446081b0ca877f893f8ec.pack","hash":"1744be030c1c9f920590168bfad2a778870d5d2d","modified":1524237847617},{"_id":"public/search.xml","hash":"60b1930ad83fbe2f3eab1d954e94f45275b38ad1","modified":1525190720491},{"_id":"public/2018/05/01/青岛？/index.html","hash":"b1cd867955a4d459dc60dc943dc3bb65e83cec89","modified":1525190720669},{"_id":"public/2018/04/25/Generator-async2/index.html","hash":"ad6c4802be117c8ac6a5c4d63bff59433a3a0280","modified":1525190720669},{"_id":"public/2018/04/21/Generator-async/index.html","hash":"8ebd110099343edaf3f3ded96bef280c52dfd5f8","modified":1525190720669},{"_id":"public/2018/04/20/想开个-ES6-的坑/index.html","hash":"dccb0dad56d6098587ba5f21b55466a7b4b9b469","modified":1525190720669},{"_id":"public/2018/04/18/Hexo-gitpage/index.html","hash":"88edff3458a22e7e8a4cedaaf100dff0f20d9b33","modified":1525190720669},{"_id":"public/archives/index.html","hash":"78571a42134b0ad306d5cce660ed712ee631159f","modified":1525190720669},{"_id":"public/archives/2018/index.html","hash":"e87a11c5df2650bc8d0537378e48e3497dd4e25e","modified":1525190720669},{"_id":"public/archives/2018/04/index.html","hash":"c82c6f6902aa2a1d6c9f9f6d1b6d83075a91d172","modified":1525190720669},{"_id":"public/archives/2018/05/index.html","hash":"ef87649a66411610458d2405e2859fcb69b83c94","modified":1525190720669},{"_id":"public/categories/ES6-Generator-async/index.html","hash":"28b25964c94bdc4f247d8c40a306de633e7a08a8","modified":1525190720670},{"_id":"public/categories/GitHub/index.html","hash":"be9473fce561884f4453d4fbe11815cf229addb0","modified":1525190720670},{"_id":"public/categories/JavaScript-ES6/index.html","hash":"dc8936943da6dd14a0980f6577ab9a504bc4c4c3","modified":1525190720670},{"_id":"public/categories/家人-旅游-娱乐/index.html","hash":"d94c9445056310f198e6025cae076f2592b4de38","modified":1525190720670},{"_id":"public/index.html","hash":"38ae2bbd76a272dc64ed2ab850a63945d2c172e8","modified":1525190720670},{"_id":"public/tags/Generator-async/index.html","hash":"a3522f25ab3ced52d0f8f4c4623deef3cf346729","modified":1525190720670},{"_id":"public/tags/hexo/index.html","hash":"70b171e223f7f329183b58c98c5feecd91122c7c","modified":1525190720670},{"_id":"public/tags/JavaScript-Promise/index.html","hash":"c6a104dbda15cbc9e5ed8517b807cbaad2772eac","modified":1525190720670},{"_id":"public/tags/旅游/index.html","hash":"6bf91c9226c9d0ca3126ef734f9b59660dd7fce6","modified":1525190720670},{"_id":"public/fonts/MaterialIcons-Regular.woff","hash":"c6c953c2ccb2ca9abb21db8dbf473b5a435f0082","modified":1525190720681},{"_id":"public/fonts/MaterialIcons-Regular.woff2","hash":"09963592e8c953cc7e14e3fb0a5b05d5042e8435","modified":1525190720681},{"_id":"public/img/avatar.png","hash":"bf483b0d495dbbcfb308348a945818e1c1cc9696","modified":1525190720682},{"_id":"public/img/bg.png","hash":"a32f9717e19e821a4030ade551dc2917c889fcd8","modified":1525190720682},{"_id":"public/img/browserstack_logo.png","hash":"a6c43887f64a7f48a2814e3714eaa1215e542037","modified":1525190720682},{"_id":"public/img/sidebar_header.png","hash":"c47f4d39f421c0a950279d050ae82f9ae6dd19ff","modified":1525190720682},{"_id":"public/img/upyun_logo.svg","hash":"1f118b2b9c54f431d5e731ccf316ceefe605ba67","modified":1525190720682},{"_id":"public/img/footer/footer_ico-bilibili.svg","hash":"1a007ae30d69aa597f589edb4ee0638a9814c988","modified":1525190720682},{"_id":"public/img/footer/footer_ico-facebook.svg","hash":"74b3b3c6bd1d76b7eaaf75d36ac929b11a5a3e82","modified":1525190720682},{"_id":"public/img/footer/footer_ico-github.svg","hash":"5f1f9f53e6a87ad674108c6bd16e424a1e888c61","modified":1525190720682},{"_id":"public/img/footer/footer_ico-gplus.svg","hash":"b50274133ab263bcacdf729871d0446b615ac984","modified":1525190720682},{"_id":"public/img/footer/footer_ico-instagram.svg","hash":"294c511e62063ea49f61e23958ab27d643ba0228","modified":1525190720682},{"_id":"public/img/footer/footer_ico-telegram.svg","hash":"413d66e40ca476deeb49364935d49d2f7839cdfd","modified":1525190720682},{"_id":"public/img/footer/footer_ico-linkedin.svg","hash":"9831c86352ec5ff283a3277d033120f86388c277","modified":1525190720682},{"_id":"public/img/footer/footer_ico-tumblr.svg","hash":"11daf4fa4220787306fc21a879429e98b7db8d03","modified":1525190720682},{"_id":"public/img/footer/footer_ico-twitter.svg","hash":"58df7777d6fcee8fa3c42453c091714bb3f97c95","modified":1525190720683},{"_id":"public/img/footer/footer_ico-v2ex.svg","hash":"c5ffaf67a97e534c266d1585a9a3b56f1bfe3052","modified":1525190720683},{"_id":"public/img/footer/footer_ico-weibo.svg","hash":"26d0cdb77f0c4afd60111176167eacfa222bc4c1","modified":1525190720683},{"_id":"public/img/footer/footer_ico-zhihu.svg","hash":"d3f8da320fffefc5144822665dfe17d25af4061c","modified":1525190720683},{"_id":"public/img/gallery/arrow.svg","hash":"144d73877e52acc5068bc0c9d1e69ef450e69f26","modified":1525190720683},{"_id":"public/img/gallery/close.svg","hash":"2690088060811f01c9360df75be80070156ff176","modified":1525190720683},{"_id":"public/img/gallery/spinner.svg","hash":"fc9d1cd1118ac896d4f5326e110a653f3ea32b11","modified":1525190720683},{"_id":"public/img/random/material-10.png","hash":"363466a376e4df9e61acc904cd25f3c7ae1a7280","modified":1525190720683},{"_id":"public/img/random/material-12.png","hash":"d020b3d42542715c7ae95b3d8603fe3180bfe8f3","modified":1525190720683},{"_id":"public/img/random/material-17.png","hash":"ece82810e31f711576db598c845c3d97bd49fe67","modified":1525190720683},{"_id":"public/img/random/material-3.png","hash":"848eaa70b9b0cd7a2204c78e8aa324d8f96bb097","modified":1525190720683},{"_id":"public/img/random/material-19.png","hash":"768ed1a4966e2e418cb00f6b36d2fc9058328eb3","modified":1525190720683},{"_id":"public/img/random/material-4.png","hash":"b475dfbf67a076a4e17a5527fd1973b1d4adac07","modified":1525190720683},{"_id":"public/img/random/material-6.png","hash":"2f841e0c064fecb607ad1e149662a0c96d9e725d","modified":1525190720683},{"_id":"public/img/random/material-8.png","hash":"57db542d526ef6866cb34e261096e93a0e6f3a82","modified":1525190720683},{"_id":"public/img/random/material-9.png","hash":"840319c4d1f38fb8df79eb4669ed2e14d89fd680","modified":1525190720684},{"_id":"public/2018/04/20/想开个-ES6-的坑/promise.png","hash":"6ee3f072dbb90940644c141bc1bb8a604b449ae1","modified":1525190720684},{"_id":"public/fonts/MaterialIcons-Regular.ttf","hash":"fc05de31234e0090f7ddc28ce1b23af4026cb1da","modified":1525190720692},{"_id":"public/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1525190720696},{"_id":"public/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1525190720699},{"_id":"public/img/avatar.jpeg","hash":"6854552c6893792c71e585bc70edad561e3cbb10","modified":1525190720704},{"_id":"public/img/daily_pic.png","hash":"5e9a5f6a134889d0242e69061837f2032416d7ce","modified":1525190720704},{"_id":"public/img/random/material-1.png","hash":"4839299eaa4db7272befa7b824e54b647fbbfc44","modified":1525190720704},{"_id":"public/img/random/material-13.png","hash":"1a8378db3121b583485e2b939cb1aa0e0b14b0c8","modified":1525190720704},{"_id":"public/img/random/material-11.png","hash":"ce20b0ad08a248c036115374f2edb7301ff60b72","modified":1525190720704},{"_id":"public/img/random/material-16.png","hash":"ade7f75200d3fb38326e3cf1e9f1a812fb12a43b","modified":1525190720704},{"_id":"public/img/random/material-15.png","hash":"36b9937cf3810e4970902b78797ad29b0831f065","modified":1525190720704},{"_id":"public/img/random/material-14.png","hash":"b4f65b601960138c69f57171b0ddd55895483f45","modified":1525190720704},{"_id":"public/img/random/material-18.png","hash":"4b98204abe36ecd3f30678d2c22059130e0db328","modified":1525190720704},{"_id":"public/img/random/material-2.png","hash":"faba2ce69c19d6c1dac392dd10b054e0061f6fb7","modified":1525190720705},{"_id":"public/img/random/material-7.png","hash":"5c49ff3c064aaeb21227c2bd98b5ae422ddca84c","modified":1525190720705},{"_id":"public/img/random/material-5.png","hash":"5041ebd073a139c67f8ed271e74c967c7eb9c5be","modified":1525190720705},{"_id":"public/css/disqus-proxy.min.css","hash":"3f8f99f71d361302288b0ba11fd36072564b08c2","modified":1525190720717},{"_id":"public/css/duoshuo.css","hash":"32a02eaa01ff7b66fd9df307b0d33d52810096be","modified":1525190720717},{"_id":"public/css/duoshuo.min.css","hash":"89a30544b8b01d061da51c40f2af702a7969de5e","modified":1525190720717},{"_id":"public/css/ie-blocker.css","hash":"dddce7e6250a449291888ae7865697282a213b14","modified":1525190720717},{"_id":"public/css/prettify.css","hash":"c395f20ee64e80c2b6b15c7dade02f9aaaeab2c8","modified":1525190720717},{"_id":"public/css/prettify.min.css","hash":"62edd8f08656463b0e077dcf893faa3cc8eb5fe4","modified":1525190720717},{"_id":"public/css/uc.css","hash":"1e0977a2c9bdf721cc05654dfc025dd250655852","modified":1525190720717},{"_id":"public/js/hanabi-browser-bundle.js","hash":"d646647bda386140c8315d60e3ff4ddbdb15c1ea","modified":1525190720717},{"_id":"public/js/ie-blocker.en.js","hash":"96ca8e677a12048d099319ebdf01983ddc6ca80c","modified":1525190720717},{"_id":"public/js/ie-blocker.zhCN.js","hash":"0ed49b0ec1d1924b128fbd97fca2cf7af7856fdf","modified":1525190720717},{"_id":"public/js/lazyload.min.js","hash":"5348fd7aa4dbefac9d21091c9fd5e263563b5540","modified":1525190720717},{"_id":"public/js/lsloader.min.js","hash":"1a68a8d267948ea8475245b7d365a1a1bd8f732e","modified":1525190720718},{"_id":"public/js/nprogress.js","hash":"a3058d4b6afb5d7a14e5afcbb88f778de35864f0","modified":1525190720718},{"_id":"public/js/prettify.min.js","hash":"69908fe0a09cee107c25cb5d769b861723e7b7bb","modified":1525190720718},{"_id":"public/js/queue.js","hash":"dd252616b568b71c222d9cfc859bfe52738e576a","modified":1525190720718},{"_id":"public/js/queue.min.js","hash":"21aab782ca33efbb1386cc960b6be0a02106760d","modified":1525190720718},{"_id":"public/js/smoothscroll.js","hash":"df56a1c84191a62750ae820943377b6775fca0e2","modified":1525190720718},{"_id":"public/js/lsloader.js","hash":"2b14e57784fb6b5f58d71584189c61af45f393e8","modified":1525190720718},{"_id":"public/css/prettify/atelier-cave-dark.min.css","hash":"cb0156cdc36500a26b232ae1c81fdc880eba85e7","modified":1525190720718},{"_id":"public/css/prettify/atelier-dune-dark.min.css","hash":"c5094d99ca0e619d97860c88211bf908fdf830b1","modified":1525190720718},{"_id":"public/css/prettify/atelier-cave-light.min.css","hash":"4b62dc45aa351b071d6a434dc54fe8c2e15c85cc","modified":1525190720718},{"_id":"public/css/prettify/atelier-dune-light.min.css","hash":"b3ad98483e4d5bde72d52a15423d98e0d086db09","modified":1525190720718},{"_id":"public/css/prettify/atelier-estuary-dark.min.css","hash":"7e3a065cafeb3acc1d7178f64ef4265f5d5ad2b9","modified":1525190720718},{"_id":"public/css/prettify/atelier-estuary-light.min.css","hash":"1d12d8f7fa9c122a186ee76fdf681c191a68f104","modified":1525190720718},{"_id":"public/css/prettify/atelier-forest-dark.min.css","hash":"9296b851a5b66785a60afa5da5fe9080bda96bf5","modified":1525190720718},{"_id":"public/css/prettify/atelier-forest-light.min.css","hash":"3532f6e86bf4afbba05f7a074b791b73174f9622","modified":1525190720718},{"_id":"public/css/prettify/atelier-heath-dark.min.css","hash":"954309acd7918422382a3ff2f9c2988aec0ff956","modified":1525190720719},{"_id":"public/css/prettify/atelier-lakeside-dark.min.css","hash":"18575fc6dff855e395a39d0383d2f18807091f0d","modified":1525190720719},{"_id":"public/css/prettify/atelier-heath-light.min.css","hash":"a67199fa580b3aa2df031e5d2028929d29ca3b45","modified":1525190720719},{"_id":"public/css/prettify/atelier-lakeside-light.min.css","hash":"e20e8ac64432fa1aa6f74792b58196af7cf79c12","modified":1525190720719},{"_id":"public/css/prettify/atelier-plateau-dark.min.css","hash":"137e3c499a720da3c1d57b4dc53264b1d623e1c5","modified":1525190720719},{"_id":"public/css/prettify/atelier-plateau-light.min.css","hash":"153801640fdcbb74c0de3f15345110f2210eb991","modified":1525190720719},{"_id":"public/css/prettify/atelier-savanna-dark.min.css","hash":"fba92c652fd6704422b8f2bbc11706805a6faed0","modified":1525190720719},{"_id":"public/css/prettify/atelier-savanna-light.min.css","hash":"d9425ffb7c60d646190c22b9a5f72091ee5f9ace","modified":1525190720719},{"_id":"public/css/prettify/atelier-seaside-dark.min.css","hash":"e0e6bbacc75a349b1e49c236d374b0e42f1fd485","modified":1525190720719},{"_id":"public/css/prettify/atelier-seaside-light.min.css","hash":"732750b75389c1c49204f37705e6abeee40ce64f","modified":1525190720719},{"_id":"public/css/prettify/atelier-sulphurpool-dark.min.css","hash":"015a35dddaee153fa8bb71d7f3818a6ba4d120d8","modified":1525190720719},{"_id":"public/css/prettify/atelier-sulphurpool-light.min.css","hash":"ab1a6200eab648cab443c3df77fde9b237ef27b6","modified":1525190720719},{"_id":"public/css/prettify/github-v2.min.css","hash":"57630621d20842a529bdea7b17fc90f520e562ef","modified":1525190720719},{"_id":"public/css/prettify/github.min.css","hash":"19cf828225288fa5c006f1d8f66c39d11f4ef7f2","modified":1525190720719},{"_id":"public/css/prettify/hemisu-light.min.css","hash":"b2556ff41e513fd13d032ec84a37ee260a905815","modified":1525190720719},{"_id":"public/css/prettify/tomorrow-night-blue.min.css","hash":"c442728d96485bcf816151fe6bd96993aae09852","modified":1525190720720},{"_id":"public/css/prettify/hemisu-dark.min.css","hash":"a671248cfd573292026d2174817e82e593691052","modified":1525190720720},{"_id":"public/css/prettify/tomorrow-night-bright.min.css","hash":"cf251fd3edfd736695272a0f1b41d509b7bb1fb9","modified":1525190720720},{"_id":"public/css/prettify/tomorrow-night.min.css","hash":"d989206d124035494acb4b0cdc7fbc89f3b7d108","modified":1525190720720},{"_id":"public/css/prettify/tomorrow-night-eighties.min.css","hash":"6ce259d674bb4edda23eea32b2379be17d0e0e6e","modified":1525190720720},{"_id":"public/css/prettify/tomorrow.min.css","hash":"b2c6d610b77f0273fefab5aa4ad26a7f58956f87","modified":1525190720720},{"_id":"public/css/prettify/tranquil-heart.min.css","hash":"0f6eefbdda8e410832e9c516a5dd19899217ef06","modified":1525190720720},{"_id":"public/css/prettify/vibrant-ink.min.css","hash":"c265bac6c31cf622b536b29c8a6bc46955d6fe63","modified":1525190720720},{"_id":"public/css/disqus-proxy.css","hash":"d5086cda8aaae20b8d3f9dd50f0be5ccb717e42a","modified":1525190720720},{"_id":"public/css/fontawesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1525190720720},{"_id":"public/css/gallery.min.css","hash":"c5333ca835aae49239d809130a7b281af745729e","modified":1525190720720},{"_id":"public/css/material-icons.css","hash":"f6f95fe5190f3c65931847246621fb83754eb00c","modified":1525190720720},{"_id":"public/js/Valine.min.js","hash":"6a287a99a772a0ea8f98b133523429c9250cc67f","modified":1525190720721},{"_id":"public/js/MathJax.js","hash":"a21703b5848325a902c9b39bbf3ca6490d3e1b1b","modified":1525190720721},{"_id":"public/css/material.min.css","hash":"1a19febb9214ab689b02f5bb8ccb23579e6c1181","modified":1525190720721},{"_id":"public/css/material.css","hash":"068e2b00f686157b6e8b78b9b808112adbedf4de","modified":1525190720721},{"_id":"public/css/style.css","hash":"7b0d53a268542fc097d82b9d33150fc0eebec917","modified":1525190720721},{"_id":"public/css/style.min.css","hash":"960b235f39556a061787e4453b639f2cd8afbf13","modified":1525190720721},{"_id":"public/js/jquery.min.js","hash":"00073d6597d2760b81387274a9ec56b9d5cb1552","modified":1525190720721},{"_id":"public/js/js.js","hash":"64b3f20e7138674ecf21e6e3982565ea63feae26","modified":1525190720721},{"_id":"public/js/js.min.js","hash":"709d347d3be033b841de0493b7cf532b594bb1f6","modified":1525190720721},{"_id":"public/js/gallery/gallery.js","hash":"8ee48312a183b42a9886211a0ec825ea0d041301","modified":1525190720721},{"_id":"public/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1525190720721},{"_id":"public/fonts/MaterialIcons-Regular.eot","hash":"26fb8cecb5512223277b4d290a24492a0f09ede1","modified":1525190720721},{"_id":"public/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1525190720721},{"_id":"public/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1525190720722},{"_id":"public/img/favicon.png","hash":"e283c968860f170023c03416063d48cbf792832b","modified":1525190720728},{"_id":"public/img/logo.png","hash":"e283c968860f170023c03416063d48cbf792832b","modified":1525190720728},{"_id":"public/fonts/fontawesome-webfont.svg","hash":"98a8aa5cf7d62c2eff5f07ede8d844b874ef06ed","modified":1525190720746},{"_id":"public/fonts/Roboto-Black.ttf","hash":"0244e6497a51fb8a38ca7e6fe297b066e2e09af5","modified":1525190720752},{"_id":"public/fonts/Roboto-Bold.ttf","hash":"d1864343b543978bd491d40c80010cea50c1b7bf","modified":1525190720752},{"_id":"public/fonts/Roboto-Light.ttf","hash":"b9ea2eaf26ff8fdcb5aee3e0c2c7a6084ebb6aac","modified":1525190720752},{"_id":"public/fonts/Roboto-Medium.ttf","hash":"3965419aab480c184f66bc5e39c1719a373a4ef6","modified":1525190720753},{"_id":"public/fonts/Roboto-Regular.ttf","hash":"06691e103d4d3ce1f1108d9b7d21254b714a41f8","modified":1525190720754},{"_id":"public/fonts/Roboto-Thin.ttf","hash":"ed5101c3a800f35e925603a406e0c2dc5278b96c","modified":1525190720754},{"_id":"public/2018/05/01/青岛？/浪花.jpeg","hash":"a8a9db04d0337feca9fc2f02752c63dad0a29b4a","modified":1525190720800}],"Category":[{"name":"ES6 Generator async","_id":"cjgnv6bbv00021ai2naeplv0u"},{"name":"GitHub","_id":"cjgnv6bc3000a1ai2o33hbjuu"},{"name":"JavaScript ES6","_id":"cjgnv6bc5000f1ai2la5h3v5i"},{"name":"家人 旅游 娱乐","_id":"cjgnv6bc5000j1ai2x40512rd"}],"Data":[],"Page":[],"Post":[{"title":"Generator & async （1）","date":"2018-04-21T14:02:36.000Z","_content":"# Generator\n\n`Generator` 是 ES6 提出一种异步解决方案。\n\n形式上 Generator 函数和普通函数有两个不同点。\n* `function` 关键字和函数名之间有一个星号，如： `function* demo`;\n* 内部函数使用 `yield` 表达式，定义不同的内部状态。\n\n```JavaScript\nfunction* demo(){\n    yield 'hi';\n    yield 'second';\n    return 'end';\n}\n\nvar test = demo();\ntest.next(); //{value: 'hi', done: false}\ntest.next(); //{value: 'second', done: false}\ntest.next(); //{value: 'end', done: true}\ntest.next(); //{value: undefined, done: true}\n```\n调用 `demo` 后函数并不会执行，返回的也不是函数运行的结果，而是一个指向内部状态的指针，只有当调用遍历器对象的 `next()` 方法，内部指针就从函数头或者上一次停下来的地方执行，知道遇到下一个 yield 表达式或者 return 语句为止。\n\n## 1. yield 表达式\n类似 Generator 函数的一个内部暂停标志。\n\nGenerator 函数就像一条马路，而 yield 是这条马路上的红绿灯路口，next 方法是站在每个路口指挥的交警。只有交警同意车辆通过后，才会执行相应的\b函数。\n\nnext 方法的运行逻辑有以下几点：\n* 遇到 `yield` 就暂停后面的操作，并将紧跟在 `yield` 后的表达式的值，作为返回对象的 `value` 属性值\n* 下次调用 `next` 方法是，再继续向下执行， 知道遇到下一个 `yield` 表达式或者 `return` 语句\n* 如果函数没有 `return` 语句，那么返回对象的 `value` 属性值为 `undefined`\n\n`yield` 和 `return` 的不同点在于，一个函数的 `return` 语句最多只能执行一次，而 `yield` 可以执行多次。 `yield` 会使函数暂停执行，下次执行的时候会从该位置继续向后执行，而 `return` 不具有记忆性。\n\n**注意：Generator 函数可以不必使用 yield。但是如果使用 yield 就必须在 Generator 函数里面，否则会报错。<br>`yield` 表达式如果用在另一个表达式之中，必须添加在圆括号里面。 `console.log('Hello' + (yield));`**\n\n\n## 2. Generator 与 Iterator\n\n任意一个对象的 `Symbol.iterator` 方法，等于该对象的遍历器生成函数，调用该函数会返回该对象的一个遍历器对象。\n\nGenerator 函数执行后，返回一个遍历器对象。该对象本身也具有 `Symbol.iterator` 属性，执行后返回自身。\n\n```JavaScript\nfunction* demo(){\n    // do some thing\n}\nvar g = demo();\ng[Symbil.iterator] === g; // true\n```\n\n## 3. next 方法的参数\n\n`yield` 表达式本省没有返回值，或者说总是返回 `undefined`。 `next` 方法可以带一个参数，该参数就会被当做上一个 `yield` 表达式的返回值。\n\n```JavaScript\nfunction* f(){\n    for( var i = 0; true; i++){\n        var reset = yield i;\n        if(reset) {\n            i = -1;\n        }\n    }\n}\n\nvar g = f();\ng.next(); // {value: 0, done: false}\ng.next(); // {value: 1, done: false}\ng.next(true); // {value: 0, done: false}\n```","source":"_posts/Generator-async.md","raw":"---\ntitle: Generator & async （1）\ndate: 2018-04-21 22:02:36\ntags: Generator async\ncategories: ES6 Generator async\n---\n# Generator\n\n`Generator` 是 ES6 提出一种异步解决方案。\n\n形式上 Generator 函数和普通函数有两个不同点。\n* `function` 关键字和函数名之间有一个星号，如： `function* demo`;\n* 内部函数使用 `yield` 表达式，定义不同的内部状态。\n\n```JavaScript\nfunction* demo(){\n    yield 'hi';\n    yield 'second';\n    return 'end';\n}\n\nvar test = demo();\ntest.next(); //{value: 'hi', done: false}\ntest.next(); //{value: 'second', done: false}\ntest.next(); //{value: 'end', done: true}\ntest.next(); //{value: undefined, done: true}\n```\n调用 `demo` 后函数并不会执行，返回的也不是函数运行的结果，而是一个指向内部状态的指针，只有当调用遍历器对象的 `next()` 方法，内部指针就从函数头或者上一次停下来的地方执行，知道遇到下一个 yield 表达式或者 return 语句为止。\n\n## 1. yield 表达式\n类似 Generator 函数的一个内部暂停标志。\n\nGenerator 函数就像一条马路，而 yield 是这条马路上的红绿灯路口，next 方法是站在每个路口指挥的交警。只有交警同意车辆通过后，才会执行相应的\b函数。\n\nnext 方法的运行逻辑有以下几点：\n* 遇到 `yield` 就暂停后面的操作，并将紧跟在 `yield` 后的表达式的值，作为返回对象的 `value` 属性值\n* 下次调用 `next` 方法是，再继续向下执行， 知道遇到下一个 `yield` 表达式或者 `return` 语句\n* 如果函数没有 `return` 语句，那么返回对象的 `value` 属性值为 `undefined`\n\n`yield` 和 `return` 的不同点在于，一个函数的 `return` 语句最多只能执行一次，而 `yield` 可以执行多次。 `yield` 会使函数暂停执行，下次执行的时候会从该位置继续向后执行，而 `return` 不具有记忆性。\n\n**注意：Generator 函数可以不必使用 yield。但是如果使用 yield 就必须在 Generator 函数里面，否则会报错。<br>`yield` 表达式如果用在另一个表达式之中，必须添加在圆括号里面。 `console.log('Hello' + (yield));`**\n\n\n## 2. Generator 与 Iterator\n\n任意一个对象的 `Symbol.iterator` 方法，等于该对象的遍历器生成函数，调用该函数会返回该对象的一个遍历器对象。\n\nGenerator 函数执行后，返回一个遍历器对象。该对象本身也具有 `Symbol.iterator` 属性，执行后返回自身。\n\n```JavaScript\nfunction* demo(){\n    // do some thing\n}\nvar g = demo();\ng[Symbil.iterator] === g; // true\n```\n\n## 3. next 方法的参数\n\n`yield` 表达式本省没有返回值，或者说总是返回 `undefined`。 `next` 方法可以带一个参数，该参数就会被当做上一个 `yield` 表达式的返回值。\n\n```JavaScript\nfunction* f(){\n    for( var i = 0; true; i++){\n        var reset = yield i;\n        if(reset) {\n            i = -1;\n        }\n    }\n}\n\nvar g = f();\ng.next(); // {value: 0, done: false}\ng.next(); // {value: 1, done: false}\ng.next(true); // {value: 0, done: false}\n```","slug":"Generator-async","published":1,"updated":"2018-04-25T14:08:07.203Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjgnv6bbp00001ai2tdgwxd3d","content":"<h1 id=\"Generator\"><a href=\"#Generator\" class=\"headerlink\" title=\"Generator\"></a>Generator</h1><p><code>Generator</code> 是 ES6 提出一种异步解决方案。</p>\n<p>形式上 Generator 函数和普通函数有两个不同点。</p>\n<ul>\n<li><code>function</code> 关键字和函数名之间有一个星号，如： <code>function* demo</code>;</li>\n<li>内部函数使用 <code>yield</code> 表达式，定义不同的内部状态。</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span>* <span class=\"title\">demo</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">yield</span> <span class=\"string\">'hi'</span>;</span><br><span class=\"line\">    <span class=\"keyword\">yield</span> <span class=\"string\">'second'</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">'end'</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> test = demo();</span><br><span class=\"line\">test.next(); <span class=\"comment\">//&#123;value: 'hi', done: false&#125;</span></span><br><span class=\"line\">test.next(); <span class=\"comment\">//&#123;value: 'second', done: false&#125;</span></span><br><span class=\"line\">test.next(); <span class=\"comment\">//&#123;value: 'end', done: true&#125;</span></span><br><span class=\"line\">test.next(); <span class=\"comment\">//&#123;value: undefined, done: true&#125;</span></span><br></pre></td></tr></table></figure>\n<p>调用 <code>demo</code> 后函数并不会执行，返回的也不是函数运行的结果，而是一个指向内部状态的指针，只有当调用遍历器对象的 <code>next()</code> 方法，内部指针就从函数头或者上一次停下来的地方执行，知道遇到下一个 yield 表达式或者 return 语句为止。</p>\n<h2 id=\"1-yield-表达式\"><a href=\"#1-yield-表达式\" class=\"headerlink\" title=\"1. yield 表达式\"></a>1. yield 表达式</h2><p>类似 Generator 函数的一个内部暂停标志。</p>\n<p>Generator 函数就像一条马路，而 yield 是这条马路上的红绿灯路口，next 方法是站在每个路口指挥的交警。只有交警同意车辆通过后，才会执行相应的\b函数。</p>\n<p>next 方法的运行逻辑有以下几点：</p>\n<ul>\n<li>遇到 <code>yield</code> 就暂停后面的操作，并将紧跟在 <code>yield</code> 后的表达式的值，作为返回对象的 <code>value</code> 属性值</li>\n<li>下次调用 <code>next</code> 方法是，再继续向下执行， 知道遇到下一个 <code>yield</code> 表达式或者 <code>return</code> 语句</li>\n<li>如果函数没有 <code>return</code> 语句，那么返回对象的 <code>value</code> 属性值为 <code>undefined</code></li>\n</ul>\n<p><code>yield</code> 和 <code>return</code> 的不同点在于，一个函数的 <code>return</code> 语句最多只能执行一次，而 <code>yield</code> 可以执行多次。 <code>yield</code> 会使函数暂停执行，下次执行的时候会从该位置继续向后执行，而 <code>return</code> 不具有记忆性。</p>\n<p><strong>注意：Generator 函数可以不必使用 yield。但是如果使用 yield 就必须在 Generator 函数里面，否则会报错。<br><code>yield</code> 表达式如果用在另一个表达式之中，必须添加在圆括号里面。 <code>console.log(&#39;Hello&#39; + (yield));</code></strong></p>\n<h2 id=\"2-Generator-与-Iterator\"><a href=\"#2-Generator-与-Iterator\" class=\"headerlink\" title=\"2. Generator 与 Iterator\"></a>2. Generator 与 Iterator</h2><p>任意一个对象的 <code>Symbol.iterator</code> 方法，等于该对象的遍历器生成函数，调用该函数会返回该对象的一个遍历器对象。</p>\n<p>Generator 函数执行后，返回一个遍历器对象。该对象本身也具有 <code>Symbol.iterator</code> 属性，执行后返回自身。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span>* <span class=\"title\">demo</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// do some thing</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> g = demo();</span><br><span class=\"line\">g[Symbil.iterator] === g; <span class=\"comment\">// true</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"3-next-方法的参数\"><a href=\"#3-next-方法的参数\" class=\"headerlink\" title=\"3. next 方法的参数\"></a>3. next 方法的参数</h2><p><code>yield</code> 表达式本省没有返回值，或者说总是返回 <code>undefined</code>。 <code>next</code> 方法可以带一个参数，该参数就会被当做上一个 <code>yield</code> 表达式的返回值。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span>* <span class=\"title\">f</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>( <span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; <span class=\"literal\">true</span>; i++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> reset = <span class=\"keyword\">yield</span> i;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(reset) &#123;</span><br><span class=\"line\">            i = <span class=\"number\">-1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> g = f();</span><br><span class=\"line\">g.next(); <span class=\"comment\">// &#123;value: 0, done: false&#125;</span></span><br><span class=\"line\">g.next(); <span class=\"comment\">// &#123;value: 1, done: false&#125;</span></span><br><span class=\"line\">g.next(<span class=\"literal\">true</span>); <span class=\"comment\">// &#123;value: 0, done: false&#125;</span></span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<h1 id=\"Generator\"><a href=\"#Generator\" class=\"headerlink\" title=\"Generator\"></a>Generator</h1><p><code>Generator</code> 是 ES6 提出一种异步解决方案。</p>\n<p>形式上 Generator 函数和普通函数有两个不同点。</p>\n<ul>\n<li><code>function</code> 关键字和函数名之间有一个星号，如： <code>function* demo</code>;</li>\n<li>内部函数使用 <code>yield</code> 表达式，定义不同的内部状态。</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span>* <span class=\"title\">demo</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">yield</span> <span class=\"string\">'hi'</span>;</span><br><span class=\"line\">    <span class=\"keyword\">yield</span> <span class=\"string\">'second'</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">'end'</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> test = demo();</span><br><span class=\"line\">test.next(); <span class=\"comment\">//&#123;value: 'hi', done: false&#125;</span></span><br><span class=\"line\">test.next(); <span class=\"comment\">//&#123;value: 'second', done: false&#125;</span></span><br><span class=\"line\">test.next(); <span class=\"comment\">//&#123;value: 'end', done: true&#125;</span></span><br><span class=\"line\">test.next(); <span class=\"comment\">//&#123;value: undefined, done: true&#125;</span></span><br></pre></td></tr></table></figure>\n<p>调用 <code>demo</code> 后函数并不会执行，返回的也不是函数运行的结果，而是一个指向内部状态的指针，只有当调用遍历器对象的 <code>next()</code> 方法，内部指针就从函数头或者上一次停下来的地方执行，知道遇到下一个 yield 表达式或者 return 语句为止。</p>\n<h2 id=\"1-yield-表达式\"><a href=\"#1-yield-表达式\" class=\"headerlink\" title=\"1. yield 表达式\"></a>1. yield 表达式</h2><p>类似 Generator 函数的一个内部暂停标志。</p>\n<p>Generator 函数就像一条马路，而 yield 是这条马路上的红绿灯路口，next 方法是站在每个路口指挥的交警。只有交警同意车辆通过后，才会执行相应的\b函数。</p>\n<p>next 方法的运行逻辑有以下几点：</p>\n<ul>\n<li>遇到 <code>yield</code> 就暂停后面的操作，并将紧跟在 <code>yield</code> 后的表达式的值，作为返回对象的 <code>value</code> 属性值</li>\n<li>下次调用 <code>next</code> 方法是，再继续向下执行， 知道遇到下一个 <code>yield</code> 表达式或者 <code>return</code> 语句</li>\n<li>如果函数没有 <code>return</code> 语句，那么返回对象的 <code>value</code> 属性值为 <code>undefined</code></li>\n</ul>\n<p><code>yield</code> 和 <code>return</code> 的不同点在于，一个函数的 <code>return</code> 语句最多只能执行一次，而 <code>yield</code> 可以执行多次。 <code>yield</code> 会使函数暂停执行，下次执行的时候会从该位置继续向后执行，而 <code>return</code> 不具有记忆性。</p>\n<p><strong>注意：Generator 函数可以不必使用 yield。但是如果使用 yield 就必须在 Generator 函数里面，否则会报错。<br><code>yield</code> 表达式如果用在另一个表达式之中，必须添加在圆括号里面。 <code>console.log(&#39;Hello&#39; + (yield));</code></strong></p>\n<h2 id=\"2-Generator-与-Iterator\"><a href=\"#2-Generator-与-Iterator\" class=\"headerlink\" title=\"2. Generator 与 Iterator\"></a>2. Generator 与 Iterator</h2><p>任意一个对象的 <code>Symbol.iterator</code> 方法，等于该对象的遍历器生成函数，调用该函数会返回该对象的一个遍历器对象。</p>\n<p>Generator 函数执行后，返回一个遍历器对象。该对象本身也具有 <code>Symbol.iterator</code> 属性，执行后返回自身。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span>* <span class=\"title\">demo</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// do some thing</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> g = demo();</span><br><span class=\"line\">g[Symbil.iterator] === g; <span class=\"comment\">// true</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"3-next-方法的参数\"><a href=\"#3-next-方法的参数\" class=\"headerlink\" title=\"3. next 方法的参数\"></a>3. next 方法的参数</h2><p><code>yield</code> 表达式本省没有返回值，或者说总是返回 <code>undefined</code>。 <code>next</code> 方法可以带一个参数，该参数就会被当做上一个 <code>yield</code> 表达式的返回值。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span>* <span class=\"title\">f</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>( <span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; <span class=\"literal\">true</span>; i++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> reset = <span class=\"keyword\">yield</span> i;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(reset) &#123;</span><br><span class=\"line\">            i = <span class=\"number\">-1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> g = f();</span><br><span class=\"line\">g.next(); <span class=\"comment\">// &#123;value: 0, done: false&#125;</span></span><br><span class=\"line\">g.next(); <span class=\"comment\">// &#123;value: 1, done: false&#125;</span></span><br><span class=\"line\">g.next(<span class=\"literal\">true</span>); <span class=\"comment\">// &#123;value: 0, done: false&#125;</span></span><br></pre></td></tr></table></figure>"},{"title":"Generator & async (2)","date":"2018-04-25T13:00:59.000Z","_content":"# Generator\n\n## 4. for...of 循环\n\n`for...of` 循环可以自动遍历 Gnerator 函数生成的 `Iterator` 对象，而且这个时候不需要调用 `next` 方法。\n\n```JavaScript\nfunction* foo() {\n    yield 1;\n    yield 2;\n    yield 3;\n    return 4\n}\n\nfor(let value of foo()) {\n    console.log(value);\n}\n/* 1 2 3 */\n```\n依次显示3个 `yield` 表达式的值。\n**Note: 一旦 `Next` 方法返回的对象中 `done` 属性为 `true`， `for...of` 循环就会终止，且不包含该返回对象，所以上述代码 `return` 语句中返回的 `4` 不包含在 `for...of` 循环里**\n\n```JavaScript\n// 循环打印斐波那契数列\nfunction* fibonacci() {\n    let [prev, curr] = [0, 1];\n    for(;;) {\n        [prev, curr] = [curr, prev + curr];\n        yield curr;\n    }\n}\nfor (let n of fibonacci()) {\n    if (n > 1000) break;\n    console.log(n);\n}\n```\n\n除了 for...of 之外， 扩展运算符（...）、结构赋值和 `Array.from` 方法\b内部调用的都是遍历器接口，所以它们都可以将 Generator 函数返回的 Iterator 对象作为参数。\n\n```JavaScript\nfunction* num() {\n    yield 1\n    yield 2\n    return 3\n}\n// 扩展运算符\n[...num()] //[1, 2]\n\nArray.from(num()) //[1, 2]\n\nlet [x, y] = num();\nx // 1\ny // 2\n\nfor (let n of num()) {\n    console.log(n)\n}\n// 1\n// 2\n```\n\n## 5. Generator.prototype.throw()\n\n在函数体外抛出错误，然后在 Geneartor 函数体内部捕获。\n\n**Note: `throw` 方法会默认执行一次 `next`**\n\n## 6. Generator.prototype.return()\n\n可以返回给定的\b值，并终结遍历 Generator 函数。\n\n**Note: 如果函数内部有 `try...finally` 代码块，那么 `return` 方法会推迟到 `finally` 代码块执行完再执行**\n\n## 7. next() throw() return() 的共同点\n\n`next()` `throw()` `return()` 三个方法本质是同一件事，可以放在一起理解，它们的作用都是让 Generator 函数恢复执行，并且使用不同的语句替换 `yield` 表达式。\n\n`next()` 是将 `yield` 表达式替换成一个值。\n\n`throw` 是将 `yield` 表达式替换成 `throw` 语句\n\n`return` 是将 `yield` 表达式替换成 `return` 语句\n\n## 8. yield* 表达式\n\n如果在 Generator 函数内部抵用另外一个 Generator 函数，默认情况下是没有效果的。这时候就需要用到 `yield*` 表达式，用来在一个 Generator 函数里面执行另一个 Generator 函数。\n\n**任何数据结构只要有 Iterator 接口，就可以被`yield*` 遍历。**","source":"_posts/Generator-async2.md","raw":"---\ntitle: Generator & async (2)\ndate: 2018-04-25 21:00:59\ntags: Generator async\ncategories: ES6 Generator async\n---\n# Generator\n\n## 4. for...of 循环\n\n`for...of` 循环可以自动遍历 Gnerator 函数生成的 `Iterator` 对象，而且这个时候不需要调用 `next` 方法。\n\n```JavaScript\nfunction* foo() {\n    yield 1;\n    yield 2;\n    yield 3;\n    return 4\n}\n\nfor(let value of foo()) {\n    console.log(value);\n}\n/* 1 2 3 */\n```\n依次显示3个 `yield` 表达式的值。\n**Note: 一旦 `Next` 方法返回的对象中 `done` 属性为 `true`， `for...of` 循环就会终止，且不包含该返回对象，所以上述代码 `return` 语句中返回的 `4` 不包含在 `for...of` 循环里**\n\n```JavaScript\n// 循环打印斐波那契数列\nfunction* fibonacci() {\n    let [prev, curr] = [0, 1];\n    for(;;) {\n        [prev, curr] = [curr, prev + curr];\n        yield curr;\n    }\n}\nfor (let n of fibonacci()) {\n    if (n > 1000) break;\n    console.log(n);\n}\n```\n\n除了 for...of 之外， 扩展运算符（...）、结构赋值和 `Array.from` 方法\b内部调用的都是遍历器接口，所以它们都可以将 Generator 函数返回的 Iterator 对象作为参数。\n\n```JavaScript\nfunction* num() {\n    yield 1\n    yield 2\n    return 3\n}\n// 扩展运算符\n[...num()] //[1, 2]\n\nArray.from(num()) //[1, 2]\n\nlet [x, y] = num();\nx // 1\ny // 2\n\nfor (let n of num()) {\n    console.log(n)\n}\n// 1\n// 2\n```\n\n## 5. Generator.prototype.throw()\n\n在函数体外抛出错误，然后在 Geneartor 函数体内部捕获。\n\n**Note: `throw` 方法会默认执行一次 `next`**\n\n## 6. Generator.prototype.return()\n\n可以返回给定的\b值，并终结遍历 Generator 函数。\n\n**Note: 如果函数内部有 `try...finally` 代码块，那么 `return` 方法会推迟到 `finally` 代码块执行完再执行**\n\n## 7. next() throw() return() 的共同点\n\n`next()` `throw()` `return()` 三个方法本质是同一件事，可以放在一起理解，它们的作用都是让 Generator 函数恢复执行，并且使用不同的语句替换 `yield` 表达式。\n\n`next()` 是将 `yield` 表达式替换成一个值。\n\n`throw` 是将 `yield` 表达式替换成 `throw` 语句\n\n`return` 是将 `yield` 表达式替换成 `return` 语句\n\n## 8. yield* 表达式\n\n如果在 Generator 函数内部抵用另外一个 Generator 函数，默认情况下是没有效果的。这时候就需要用到 `yield*` 表达式，用来在一个 Generator 函数里面执行另一个 Generator 函数。\n\n**任何数据结构只要有 Iterator 接口，就可以被`yield*` 遍历。**","slug":"Generator-async2","published":1,"updated":"2018-04-25T14:08:42.449Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjgnv6bbt00011ai2ou3zzr3a","content":"<h1 id=\"Generator\"><a href=\"#Generator\" class=\"headerlink\" title=\"Generator\"></a>Generator</h1><h2 id=\"4-for…of-循环\"><a href=\"#4-for…of-循环\" class=\"headerlink\" title=\"4. for…of 循环\"></a>4. for…of 循环</h2><p><code>for...of</code> 循环可以自动遍历 Gnerator 函数生成的 <code>Iterator</code> 对象，而且这个时候不需要调用 <code>next</code> 方法。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span>* <span class=\"title\">foo</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">yield</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">yield</span> <span class=\"number\">2</span>;</span><br><span class=\"line\">    <span class=\"keyword\">yield</span> <span class=\"number\">3</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">4</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> value <span class=\"keyword\">of</span> foo()) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(value);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">/* 1 2 3 */</span></span><br></pre></td></tr></table></figure>\n<p>依次显示3个 <code>yield</code> 表达式的值。<br><strong>Note: 一旦 <code>Next</code> 方法返回的对象中 <code>done</code> 属性为 <code>true</code>， <code>for...of</code> 循环就会终止，且不包含该返回对象，所以上述代码 <code>return</code> 语句中返回的 <code>4</code> 不包含在 <code>for...of</code> 循环里</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 循环打印斐波那契数列</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span>* <span class=\"title\">fibonacci</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> [prev, curr] = [<span class=\"number\">0</span>, <span class=\"number\">1</span>];</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(;;) &#123;</span><br><span class=\"line\">        [prev, curr] = [curr, prev + curr];</span><br><span class=\"line\">        <span class=\"keyword\">yield</span> curr;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> n <span class=\"keyword\">of</span> fibonacci()) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (n &gt; <span class=\"number\">1000</span>) <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(n);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>除了 for…of 之外， 扩展运算符（…）、结构赋值和 <code>Array.from</code> 方法\b内部调用的都是遍历器接口，所以它们都可以将 Generator 函数返回的 Iterator 对象作为参数。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span>* <span class=\"title\">num</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">yield</span> <span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"keyword\">yield</span> <span class=\"number\">2</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">3</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 扩展运算符</span></span><br><span class=\"line\">[...num()] <span class=\"comment\">//[1, 2]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">Array</span>.from(num()) <span class=\"comment\">//[1, 2]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> [x, y] = num();</span><br><span class=\"line\">x <span class=\"comment\">// 1</span></span><br><span class=\"line\">y <span class=\"comment\">// 2</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> n <span class=\"keyword\">of</span> num()) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(n)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 1</span></span><br><span class=\"line\"><span class=\"comment\">// 2</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"5-Generator-prototype-throw\"><a href=\"#5-Generator-prototype-throw\" class=\"headerlink\" title=\"5. Generator.prototype.throw()\"></a>5. Generator.prototype.throw()</h2><p>在函数体外抛出错误，然后在 Geneartor 函数体内部捕获。</p>\n<p><strong>Note: <code>throw</code> 方法会默认执行一次 <code>next</code></strong></p>\n<h2 id=\"6-Generator-prototype-return\"><a href=\"#6-Generator-prototype-return\" class=\"headerlink\" title=\"6. Generator.prototype.return()\"></a>6. Generator.prototype.return()</h2><p>可以返回给定的\b值，并终结遍历 Generator 函数。</p>\n<p><strong>Note: 如果函数内部有 <code>try...finally</code> 代码块，那么 <code>return</code> 方法会推迟到 <code>finally</code> 代码块执行完再执行</strong></p>\n<h2 id=\"7-next-throw-return-的共同点\"><a href=\"#7-next-throw-return-的共同点\" class=\"headerlink\" title=\"7. next() throw() return() 的共同点\"></a>7. next() throw() return() 的共同点</h2><p><code>next()</code> <code>throw()</code> <code>return()</code> 三个方法本质是同一件事，可以放在一起理解，它们的作用都是让 Generator 函数恢复执行，并且使用不同的语句替换 <code>yield</code> 表达式。</p>\n<p><code>next()</code> 是将 <code>yield</code> 表达式替换成一个值。</p>\n<p><code>throw</code> 是将 <code>yield</code> 表达式替换成 <code>throw</code> 语句</p>\n<p><code>return</code> 是将 <code>yield</code> 表达式替换成 <code>return</code> 语句</p>\n<h2 id=\"8-yield-表达式\"><a href=\"#8-yield-表达式\" class=\"headerlink\" title=\"8. yield* 表达式\"></a>8. yield* 表达式</h2><p>如果在 Generator 函数内部抵用另外一个 Generator 函数，默认情况下是没有效果的。这时候就需要用到 <code>yield*</code> 表达式，用来在一个 Generator 函数里面执行另一个 Generator 函数。</p>\n<p><strong>任何数据结构只要有 Iterator 接口，就可以被<code>yield*</code> 遍历。</strong></p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"Generator\"><a href=\"#Generator\" class=\"headerlink\" title=\"Generator\"></a>Generator</h1><h2 id=\"4-for…of-循环\"><a href=\"#4-for…of-循环\" class=\"headerlink\" title=\"4. for…of 循环\"></a>4. for…of 循环</h2><p><code>for...of</code> 循环可以自动遍历 Gnerator 函数生成的 <code>Iterator</code> 对象，而且这个时候不需要调用 <code>next</code> 方法。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span>* <span class=\"title\">foo</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">yield</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">yield</span> <span class=\"number\">2</span>;</span><br><span class=\"line\">    <span class=\"keyword\">yield</span> <span class=\"number\">3</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">4</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> value <span class=\"keyword\">of</span> foo()) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(value);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">/* 1 2 3 */</span></span><br></pre></td></tr></table></figure>\n<p>依次显示3个 <code>yield</code> 表达式的值。<br><strong>Note: 一旦 <code>Next</code> 方法返回的对象中 <code>done</code> 属性为 <code>true</code>， <code>for...of</code> 循环就会终止，且不包含该返回对象，所以上述代码 <code>return</code> 语句中返回的 <code>4</code> 不包含在 <code>for...of</code> 循环里</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 循环打印斐波那契数列</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span>* <span class=\"title\">fibonacci</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> [prev, curr] = [<span class=\"number\">0</span>, <span class=\"number\">1</span>];</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(;;) &#123;</span><br><span class=\"line\">        [prev, curr] = [curr, prev + curr];</span><br><span class=\"line\">        <span class=\"keyword\">yield</span> curr;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> n <span class=\"keyword\">of</span> fibonacci()) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (n &gt; <span class=\"number\">1000</span>) <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(n);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>除了 for…of 之外， 扩展运算符（…）、结构赋值和 <code>Array.from</code> 方法\b内部调用的都是遍历器接口，所以它们都可以将 Generator 函数返回的 Iterator 对象作为参数。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span>* <span class=\"title\">num</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">yield</span> <span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"keyword\">yield</span> <span class=\"number\">2</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">3</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 扩展运算符</span></span><br><span class=\"line\">[...num()] <span class=\"comment\">//[1, 2]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">Array</span>.from(num()) <span class=\"comment\">//[1, 2]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> [x, y] = num();</span><br><span class=\"line\">x <span class=\"comment\">// 1</span></span><br><span class=\"line\">y <span class=\"comment\">// 2</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> n <span class=\"keyword\">of</span> num()) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(n)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 1</span></span><br><span class=\"line\"><span class=\"comment\">// 2</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"5-Generator-prototype-throw\"><a href=\"#5-Generator-prototype-throw\" class=\"headerlink\" title=\"5. Generator.prototype.throw()\"></a>5. Generator.prototype.throw()</h2><p>在函数体外抛出错误，然后在 Geneartor 函数体内部捕获。</p>\n<p><strong>Note: <code>throw</code> 方法会默认执行一次 <code>next</code></strong></p>\n<h2 id=\"6-Generator-prototype-return\"><a href=\"#6-Generator-prototype-return\" class=\"headerlink\" title=\"6. Generator.prototype.return()\"></a>6. Generator.prototype.return()</h2><p>可以返回给定的\b值，并终结遍历 Generator 函数。</p>\n<p><strong>Note: 如果函数内部有 <code>try...finally</code> 代码块，那么 <code>return</code> 方法会推迟到 <code>finally</code> 代码块执行完再执行</strong></p>\n<h2 id=\"7-next-throw-return-的共同点\"><a href=\"#7-next-throw-return-的共同点\" class=\"headerlink\" title=\"7. next() throw() return() 的共同点\"></a>7. next() throw() return() 的共同点</h2><p><code>next()</code> <code>throw()</code> <code>return()</code> 三个方法本质是同一件事，可以放在一起理解，它们的作用都是让 Generator 函数恢复执行，并且使用不同的语句替换 <code>yield</code> 表达式。</p>\n<p><code>next()</code> 是将 <code>yield</code> 表达式替换成一个值。</p>\n<p><code>throw</code> 是将 <code>yield</code> 表达式替换成 <code>throw</code> 语句</p>\n<p><code>return</code> 是将 <code>yield</code> 表达式替换成 <code>return</code> 语句</p>\n<h2 id=\"8-yield-表达式\"><a href=\"#8-yield-表达式\" class=\"headerlink\" title=\"8. yield* 表达式\"></a>8. yield* 表达式</h2><p>如果在 Generator 函数内部抵用另外一个 Generator 函数，默认情况下是没有效果的。这时候就需要用到 <code>yield*</code> 表达式，用来在一个 Generator 函数里面执行另一个 Generator 函数。</p>\n<p><strong>任何数据结构只要有 Iterator 接口，就可以被<code>yield*</code> 遍历。</strong></p>\n"},{"title":"Gitpage & Hexo","date":"2018-04-18T04:13:03.000Z","_content":"# Gitpage 配合 Hexo 搭建自己的博客\n\n之前面试感觉自己的技术沉淀还是不够。目前打算用博客记录自己的学习心得。之前\b一直是用云笔记记录。现在改用\bgitpage + hexo，一方面GitHub 的提交记录方便自己查看更新状态，能够对自己有个审视。另一方面，放在github上方便\b别人阅读查看和共享。\n\n## 1. \b用 GitHub 创建一个\b Repository.\n\n* \b登录 GitHub 主页。点击 New Repository\n\n* Repository name 名称填上 GitHub 的用户名 + github.io。 `例如： 我叫 hongxuWei, 那么我 GitHub 仓库的名称就填 hongxuWei.github.io`\n\n* 点击 Create repository\n\n如何\b查看是否创建成功呢？\n\n在\b新建的仓库下创建一个 \bindex.html 静态文件。以我自己为例，登录 [https://hongxuwei.github.io](https://hongxuwei.github.io)  (协议类型https不要省略)\n如果可以访问那么第一步就完成了。\n\n## 2. 本地下载 hexo\n\n```bash\nnpm install hexo-cli -g\nhexo init gitpage #这里 gitpage 仅仅指你博客的名称\ncd gitpage\nnpm install\nhexo g # markdown 文件生成为 html 文件\nhexo s # 开启本地预览 http://localhost:4000/\n```\n这样我们就可以愉快的用 markdown 写博客啦。\n\n## 3. 部署 hexo 到 gitpage\n\n安装插件\n```\nnpm install gexo-deployer-git --save\n```\n\n修改 _config.yml 文件\n```\ndeploy:\n    type: github\n    repo: ***.git\n```\n发布\n```\nhexo d\n```","source":"_posts/Hexo-gitpage.md","raw":"---\ntitle: Gitpage & Hexo\ndate: 2018-04-18 12:13:03\ntags: hexo\ncategories: GitHub\n---\n# Gitpage 配合 Hexo 搭建自己的博客\n\n之前面试感觉自己的技术沉淀还是不够。目前打算用博客记录自己的学习心得。之前\b一直是用云笔记记录。现在改用\bgitpage + hexo，一方面GitHub 的提交记录方便自己查看更新状态，能够对自己有个审视。另一方面，放在github上方便\b别人阅读查看和共享。\n\n## 1. \b用 GitHub 创建一个\b Repository.\n\n* \b登录 GitHub 主页。点击 New Repository\n\n* Repository name 名称填上 GitHub 的用户名 + github.io。 `例如： 我叫 hongxuWei, 那么我 GitHub 仓库的名称就填 hongxuWei.github.io`\n\n* 点击 Create repository\n\n如何\b查看是否创建成功呢？\n\n在\b新建的仓库下创建一个 \bindex.html 静态文件。以我自己为例，登录 [https://hongxuwei.github.io](https://hongxuwei.github.io)  (协议类型https不要省略)\n如果可以访问那么第一步就完成了。\n\n## 2. 本地下载 hexo\n\n```bash\nnpm install hexo-cli -g\nhexo init gitpage #这里 gitpage 仅仅指你博客的名称\ncd gitpage\nnpm install\nhexo g # markdown 文件生成为 html 文件\nhexo s # 开启本地预览 http://localhost:4000/\n```\n这样我们就可以愉快的用 markdown 写博客啦。\n\n## 3. 部署 hexo 到 gitpage\n\n安装插件\n```\nnpm install gexo-deployer-git --save\n```\n\n修改 _config.yml 文件\n```\ndeploy:\n    type: github\n    repo: ***.git\n```\n发布\n```\nhexo d\n```","slug":"Hexo-gitpage","published":1,"updated":"2018-04-25T14:06:16.803Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjgnv6bbx00041ai2s6gsg9k1","content":"<h1 id=\"Gitpage-配合-Hexo-搭建自己的博客\"><a href=\"#Gitpage-配合-Hexo-搭建自己的博客\" class=\"headerlink\" title=\"Gitpage 配合 Hexo 搭建自己的博客\"></a>Gitpage 配合 Hexo 搭建自己的博客</h1><p>之前面试感觉自己的技术沉淀还是不够。目前打算用博客记录自己的学习心得。之前\b一直是用云笔记记录。现在改用\bgitpage + hexo，一方面GitHub 的提交记录方便自己查看更新状态，能够对自己有个审视。另一方面，放在github上方便\b别人阅读查看和共享。</p>\n<h2 id=\"1-用-GitHub-创建一个-Repository\"><a href=\"#1-用-GitHub-创建一个-Repository\" class=\"headerlink\" title=\"1. \b用 GitHub 创建一个\b Repository.\"></a>1. \b用 GitHub 创建一个\b Repository.</h2><ul>\n<li><p>\b登录 GitHub 主页。点击 New Repository</p>\n</li>\n<li><p>Repository name 名称填上 GitHub 的用户名 + github.io。 <code>例如： 我叫 hongxuWei, 那么我 GitHub 仓库的名称就填 hongxuWei.github.io</code></p>\n</li>\n<li><p>点击 Create repository</p>\n</li>\n</ul>\n<p>如何\b查看是否创建成功呢？</p>\n<p>在\b新建的仓库下创建一个 \bindex.html 静态文件。以我自己为例，登录 <a href=\"https://hongxuwei.github.io\">https://hongxuwei.github.io</a>  (协议类型https不要省略)<br>如果可以访问那么第一步就完成了。</p>\n<h2 id=\"2-本地下载-hexo\"><a href=\"#2-本地下载-hexo\" class=\"headerlink\" title=\"2. 本地下载 hexo\"></a>2. 本地下载 hexo</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install hexo-cli -g</span><br><span class=\"line\">hexo init gitpage <span class=\"comment\">#这里 gitpage 仅仅指你博客的名称</span></span><br><span class=\"line\"><span class=\"built_in\">cd</span> gitpage</span><br><span class=\"line\">npm install</span><br><span class=\"line\">hexo g <span class=\"comment\"># markdown 文件生成为 html 文件</span></span><br><span class=\"line\">hexo s <span class=\"comment\"># 开启本地预览 http://localhost:4000/</span></span><br></pre></td></tr></table></figure>\n<p>这样我们就可以愉快的用 markdown 写博客啦。</p>\n<h2 id=\"3-部署-hexo-到-gitpage\"><a href=\"#3-部署-hexo-到-gitpage\" class=\"headerlink\" title=\"3. 部署 hexo 到 gitpage\"></a>3. 部署 hexo 到 gitpage</h2><p>安装插件<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install gexo-deployer-git --save</span><br></pre></td></tr></table></figure></p>\n<p>修改 _config.yml 文件<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">deploy:</span><br><span class=\"line\">    type: github</span><br><span class=\"line\">    repo: ***.git</span><br></pre></td></tr></table></figure></p>\n<p>发布<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo d</span><br></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"Gitpage-配合-Hexo-搭建自己的博客\"><a href=\"#Gitpage-配合-Hexo-搭建自己的博客\" class=\"headerlink\" title=\"Gitpage 配合 Hexo 搭建自己的博客\"></a>Gitpage 配合 Hexo 搭建自己的博客</h1><p>之前面试感觉自己的技术沉淀还是不够。目前打算用博客记录自己的学习心得。之前\b一直是用云笔记记录。现在改用\bgitpage + hexo，一方面GitHub 的提交记录方便自己查看更新状态，能够对自己有个审视。另一方面，放在github上方便\b别人阅读查看和共享。</p>\n<h2 id=\"1-用-GitHub-创建一个-Repository\"><a href=\"#1-用-GitHub-创建一个-Repository\" class=\"headerlink\" title=\"1. \b用 GitHub 创建一个\b Repository.\"></a>1. \b用 GitHub 创建一个\b Repository.</h2><ul>\n<li><p>\b登录 GitHub 主页。点击 New Repository</p>\n</li>\n<li><p>Repository name 名称填上 GitHub 的用户名 + github.io。 <code>例如： 我叫 hongxuWei, 那么我 GitHub 仓库的名称就填 hongxuWei.github.io</code></p>\n</li>\n<li><p>点击 Create repository</p>\n</li>\n</ul>\n<p>如何\b查看是否创建成功呢？</p>\n<p>在\b新建的仓库下创建一个 \bindex.html 静态文件。以我自己为例，登录 <a href=\"https://hongxuwei.github.io\">https://hongxuwei.github.io</a>  (协议类型https不要省略)<br>如果可以访问那么第一步就完成了。</p>\n<h2 id=\"2-本地下载-hexo\"><a href=\"#2-本地下载-hexo\" class=\"headerlink\" title=\"2. 本地下载 hexo\"></a>2. 本地下载 hexo</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install hexo-cli -g</span><br><span class=\"line\">hexo init gitpage <span class=\"comment\">#这里 gitpage 仅仅指你博客的名称</span></span><br><span class=\"line\"><span class=\"built_in\">cd</span> gitpage</span><br><span class=\"line\">npm install</span><br><span class=\"line\">hexo g <span class=\"comment\"># markdown 文件生成为 html 文件</span></span><br><span class=\"line\">hexo s <span class=\"comment\"># 开启本地预览 http://localhost:4000/</span></span><br></pre></td></tr></table></figure>\n<p>这样我们就可以愉快的用 markdown 写博客啦。</p>\n<h2 id=\"3-部署-hexo-到-gitpage\"><a href=\"#3-部署-hexo-到-gitpage\" class=\"headerlink\" title=\"3. 部署 hexo 到 gitpage\"></a>3. 部署 hexo 到 gitpage</h2><p>安装插件<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install gexo-deployer-git --save</span><br></pre></td></tr></table></figure></p>\n<p>修改 _config.yml 文件<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">deploy:</span><br><span class=\"line\">    type: github</span><br><span class=\"line\">    repo: ***.git</span><br></pre></td></tr></table></figure></p>\n<p>发布<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo d</span><br></pre></td></tr></table></figure></p>\n"},{"title":"想开个 ES6 的坑","date":"2018-04-20T13:32:00.000Z","_content":"\n# ES6 Promise\n\n`Promise` 是 ES6 的异步编程解决方案。\n\nPromise 有 3 种状态 `pending` （正在进行）`fulfilled` (成功) `rejected` (失败)。 只有异步操作的结果可以决定状态。\n\n其中 这3种状态的转换\b关系是 `pending` -> `fulfilled`, `pending` -> `rejected`. 而 fulfilled 和 rejected 这两种状态一旦形成就不可改变。\n\n一图胜千言\n![Promise图解](promise.png)\n\n## 1. 用法\n\nPromise 对象是一个构造函数，用来生成 Promise 实例。\n\n```JavaScript\nconst promise = new Promise((resolve, reject)=>{\n    /* do some thing */\n    if(/* promise success */) {\n        resolve(value);\n    } else {\n        reject(error)\n    }\n})\n```\n\n`resolve` 函数将 `Promise` 对象状态由 `pending` 变为 `fulfilled` 状态， 在异步操作成功时调用，并将异步操作的结果作为参数传递。\n\n`reject` 函数的作用是，将 `Promise`对象的状态从 `pending` 变为 `rejected` 状态，在异步操作失败时调用，并将异步操作报出的错误作为参数传递。\n\n## 2. Promise.prototype.then()\nPromise 实例生成之后就可以调用 then 方法分别指定 fulfilled 状态和 rejected 状态的回调函数。\n\n```JavaScript\npromise.then((value)=>{\n    /* do some thing when success */\n}, (error)=>{\n    /* do some thing when failed */\n})\n```\n如上所示，then 方法可以接受两个参数，分别对应的是 `fulfilled` 状态的回调函数和 `rejected` 状态的回调函数。其中 `rejected` 状态的回调函数是可选参数。\n\n## 3. Promise.prototype.catch()\n相当于 `promise.then(null, rejection)` 用于指定异步操作失败时候的回调函数。\n\n**注意：如果 Promise 的状态已经是fulfilled的话，再抛出错误则不会调用 rejection函数**\n\n**Promise对象的错误具有“冒泡”性质，会一直向后传递，知道被捕获为止**\n\n## 4. Promise.prototype.finnaly()\n`finally` 方法用于不论 Promise 对象的状态如何，都会执行的操作。（ES2018)\n\n## 5. Promise.all()\n用于将多个 Promise 实例，包装成一个新的 Promise 实例。\n\n```JavaScript\nconst p = Promise([p1, p2, p3]);\n```\nPromise.all 方法接受一个数组作为参数，数组内都是 Promise 实例。 如果不是就会调用 Promise.resolve 方法，将参数转为 Promise 实例。\n\n（假设成功为true, 失败为false）\n`p = p1 && p2 && p3` 即 p1, p2, p3的状态都是 fulfilled 时 p 的状态才是 fulfilled。只要其中一个状态是 rejected, 那么 p 的状态就为 rejected。\n\n## 6. Promise.race()\nPromise.race 方法同 Promise.all 类似。只不过公式换为 `p = p1 || p2 || p3`\n\n## 7. Promise.resolve()\n将现有对象转为 Promise 对象\n* 参数是 `Promise` 实例，该方法不做任何处理，直接返回该实例。\n* 参数是一个 `thenable` 对象，该方法会将对象转为 Promise 对象，然后执行 thenable 对象的 then 方法。\n* 参数不是具有 then 方法的对象或根本不是对象，该方法返回一个新的 Promise 对象，状态为 `fulfilled`。\n* 没有参数，该方法返回一个新的 Promise 对象，状态为 `fulfilled`。\n\n## 8. Promise.reject()\n该方法会返回一个新的 Promise 实例，该实例的状态为 rejected。\n\n**注意：该方法的参数，会作为reject的理由变成后续方法的参数。**\n\n```JavaScript\nconst thenable = {\n    then(resolve, reject) {\n        reject('error');\n    }\n}\nPromise.reject(thenable).catch(e=>{\n    console.log(e === thenable)\n})\n// true\n```","source":"_posts/想开个-ES6-的坑.md","raw":"---\ntitle: 想开个 ES6 的坑\ndate: 2018-04-20 21:32:00\ntags: JavaScript Promise\ncategories: JavaScript ES6\n---\n\n# ES6 Promise\n\n`Promise` 是 ES6 的异步编程解决方案。\n\nPromise 有 3 种状态 `pending` （正在进行）`fulfilled` (成功) `rejected` (失败)。 只有异步操作的结果可以决定状态。\n\n其中 这3种状态的转换\b关系是 `pending` -> `fulfilled`, `pending` -> `rejected`. 而 fulfilled 和 rejected 这两种状态一旦形成就不可改变。\n\n一图胜千言\n![Promise图解](promise.png)\n\n## 1. 用法\n\nPromise 对象是一个构造函数，用来生成 Promise 实例。\n\n```JavaScript\nconst promise = new Promise((resolve, reject)=>{\n    /* do some thing */\n    if(/* promise success */) {\n        resolve(value);\n    } else {\n        reject(error)\n    }\n})\n```\n\n`resolve` 函数将 `Promise` 对象状态由 `pending` 变为 `fulfilled` 状态， 在异步操作成功时调用，并将异步操作的结果作为参数传递。\n\n`reject` 函数的作用是，将 `Promise`对象的状态从 `pending` 变为 `rejected` 状态，在异步操作失败时调用，并将异步操作报出的错误作为参数传递。\n\n## 2. Promise.prototype.then()\nPromise 实例生成之后就可以调用 then 方法分别指定 fulfilled 状态和 rejected 状态的回调函数。\n\n```JavaScript\npromise.then((value)=>{\n    /* do some thing when success */\n}, (error)=>{\n    /* do some thing when failed */\n})\n```\n如上所示，then 方法可以接受两个参数，分别对应的是 `fulfilled` 状态的回调函数和 `rejected` 状态的回调函数。其中 `rejected` 状态的回调函数是可选参数。\n\n## 3. Promise.prototype.catch()\n相当于 `promise.then(null, rejection)` 用于指定异步操作失败时候的回调函数。\n\n**注意：如果 Promise 的状态已经是fulfilled的话，再抛出错误则不会调用 rejection函数**\n\n**Promise对象的错误具有“冒泡”性质，会一直向后传递，知道被捕获为止**\n\n## 4. Promise.prototype.finnaly()\n`finally` 方法用于不论 Promise 对象的状态如何，都会执行的操作。（ES2018)\n\n## 5. Promise.all()\n用于将多个 Promise 实例，包装成一个新的 Promise 实例。\n\n```JavaScript\nconst p = Promise([p1, p2, p3]);\n```\nPromise.all 方法接受一个数组作为参数，数组内都是 Promise 实例。 如果不是就会调用 Promise.resolve 方法，将参数转为 Promise 实例。\n\n（假设成功为true, 失败为false）\n`p = p1 && p2 && p3` 即 p1, p2, p3的状态都是 fulfilled 时 p 的状态才是 fulfilled。只要其中一个状态是 rejected, 那么 p 的状态就为 rejected。\n\n## 6. Promise.race()\nPromise.race 方法同 Promise.all 类似。只不过公式换为 `p = p1 || p2 || p3`\n\n## 7. Promise.resolve()\n将现有对象转为 Promise 对象\n* 参数是 `Promise` 实例，该方法不做任何处理，直接返回该实例。\n* 参数是一个 `thenable` 对象，该方法会将对象转为 Promise 对象，然后执行 thenable 对象的 then 方法。\n* 参数不是具有 then 方法的对象或根本不是对象，该方法返回一个新的 Promise 对象，状态为 `fulfilled`。\n* 没有参数，该方法返回一个新的 Promise 对象，状态为 `fulfilled`。\n\n## 8. Promise.reject()\n该方法会返回一个新的 Promise 实例，该实例的状态为 rejected。\n\n**注意：该方法的参数，会作为reject的理由变成后续方法的参数。**\n\n```JavaScript\nconst thenable = {\n    then(resolve, reject) {\n        reject('error');\n    }\n}\nPromise.reject(thenable).catch(e=>{\n    console.log(e === thenable)\n})\n// true\n```","slug":"想开个-ES6-的坑","published":1,"updated":"2018-04-25T14:07:02.463Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjgnv6bby00051ai2cc8k42yi","content":"<h1 id=\"ES6-Promise\"><a href=\"#ES6-Promise\" class=\"headerlink\" title=\"ES6 Promise\"></a>ES6 Promise</h1><p><code>Promise</code> 是 ES6 的异步编程解决方案。</p>\n<p>Promise 有 3 种状态 <code>pending</code> （正在进行）<code>fulfilled</code> (成功) <code>rejected</code> (失败)。 只有异步操作的结果可以决定状态。</p>\n<p>其中 这3种状态的转换\b关系是 <code>pending</code> -&gt; <code>fulfilled</code>, <code>pending</code> -&gt; <code>rejected</code>. 而 fulfilled 和 rejected 这两种状态一旦形成就不可改变。</p>\n<p>一图胜千言<br><img src=\"/2018/04/20/想开个-ES6-的坑/promise.png\" alt=\"Promise图解\"></p>\n<h2 id=\"1-用法\"><a href=\"#1-用法\" class=\"headerlink\" title=\"1. 用法\"></a>1. 用法</h2><p>Promise 对象是一个构造函数，用来生成 Promise 实例。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> promise = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>)=&gt;</span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">/* do some thing */</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(<span class=\"comment\">/* promise success */</span>) &#123;</span><br><span class=\"line\">        resolve(value);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        reject(error)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p><code>resolve</code> 函数将 <code>Promise</code> 对象状态由 <code>pending</code> 变为 <code>fulfilled</code> 状态， 在异步操作成功时调用，并将异步操作的结果作为参数传递。</p>\n<p><code>reject</code> 函数的作用是，将 <code>Promise</code>对象的状态从 <code>pending</code> 变为 <code>rejected</code> 状态，在异步操作失败时调用，并将异步操作报出的错误作为参数传递。</p>\n<h2 id=\"2-Promise-prototype-then\"><a href=\"#2-Promise-prototype-then\" class=\"headerlink\" title=\"2. Promise.prototype.then()\"></a>2. Promise.prototype.then()</h2><p>Promise 实例生成之后就可以调用 then 方法分别指定 fulfilled 状态和 rejected 状态的回调函数。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">promise.then(<span class=\"function\">(<span class=\"params\">value</span>)=&gt;</span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">/* do some thing when success */</span></span><br><span class=\"line\">&#125;, (error)=&gt;&#123;</span><br><span class=\"line\">    <span class=\"comment\">/* do some thing when failed */</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>如上所示，then 方法可以接受两个参数，分别对应的是 <code>fulfilled</code> 状态的回调函数和 <code>rejected</code> 状态的回调函数。其中 <code>rejected</code> 状态的回调函数是可选参数。</p>\n<h2 id=\"3-Promise-prototype-catch\"><a href=\"#3-Promise-prototype-catch\" class=\"headerlink\" title=\"3. Promise.prototype.catch()\"></a>3. Promise.prototype.catch()</h2><p>相当于 <code>promise.then(null, rejection)</code> 用于指定异步操作失败时候的回调函数。</p>\n<p><strong>注意：如果 Promise 的状态已经是fulfilled的话，再抛出错误则不会调用 rejection函数</strong></p>\n<p><strong>Promise对象的错误具有“冒泡”性质，会一直向后传递，知道被捕获为止</strong></p>\n<h2 id=\"4-Promise-prototype-finnaly\"><a href=\"#4-Promise-prototype-finnaly\" class=\"headerlink\" title=\"4. Promise.prototype.finnaly()\"></a>4. Promise.prototype.finnaly()</h2><p><code>finally</code> 方法用于不论 Promise 对象的状态如何，都会执行的操作。（ES2018)</p>\n<h2 id=\"5-Promise-all\"><a href=\"#5-Promise-all\" class=\"headerlink\" title=\"5. Promise.all()\"></a>5. Promise.all()</h2><p>用于将多个 Promise 实例，包装成一个新的 Promise 实例。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> p = <span class=\"built_in\">Promise</span>([p1, p2, p3]);</span><br></pre></td></tr></table></figure>\n<p>Promise.all 方法接受一个数组作为参数，数组内都是 Promise 实例。 如果不是就会调用 Promise.resolve 方法，将参数转为 Promise 实例。</p>\n<p>（假设成功为true, 失败为false）<br><code>p = p1 &amp;&amp; p2 &amp;&amp; p3</code> 即 p1, p2, p3的状态都是 fulfilled 时 p 的状态才是 fulfilled。只要其中一个状态是 rejected, 那么 p 的状态就为 rejected。</p>\n<h2 id=\"6-Promise-race\"><a href=\"#6-Promise-race\" class=\"headerlink\" title=\"6. Promise.race()\"></a>6. Promise.race()</h2><p>Promise.race 方法同 Promise.all 类似。只不过公式换为 <code>p = p1 || p2 || p3</code></p>\n<h2 id=\"7-Promise-resolve\"><a href=\"#7-Promise-resolve\" class=\"headerlink\" title=\"7. Promise.resolve()\"></a>7. Promise.resolve()</h2><p>将现有对象转为 Promise 对象</p>\n<ul>\n<li>参数是 <code>Promise</code> 实例，该方法不做任何处理，直接返回该实例。</li>\n<li>参数是一个 <code>thenable</code> 对象，该方法会将对象转为 Promise 对象，然后执行 thenable 对象的 then 方法。</li>\n<li>参数不是具有 then 方法的对象或根本不是对象，该方法返回一个新的 Promise 对象，状态为 <code>fulfilled</code>。</li>\n<li>没有参数，该方法返回一个新的 Promise 对象，状态为 <code>fulfilled</code>。</li>\n</ul>\n<h2 id=\"8-Promise-reject\"><a href=\"#8-Promise-reject\" class=\"headerlink\" title=\"8. Promise.reject()\"></a>8. Promise.reject()</h2><p>该方法会返回一个新的 Promise 实例，该实例的状态为 rejected。</p>\n<p><strong>注意：该方法的参数，会作为reject的理由变成后续方法的参数。</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> thenable = &#123;</span><br><span class=\"line\">    then(resolve, reject) &#123;</span><br><span class=\"line\">        reject(<span class=\"string\">'error'</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">Promise</span>.reject(thenable).catch(<span class=\"function\"><span class=\"params\">e</span>=&gt;</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(e === thenable)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"comment\">// true</span></span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<h1 id=\"ES6-Promise\"><a href=\"#ES6-Promise\" class=\"headerlink\" title=\"ES6 Promise\"></a>ES6 Promise</h1><p><code>Promise</code> 是 ES6 的异步编程解决方案。</p>\n<p>Promise 有 3 种状态 <code>pending</code> （正在进行）<code>fulfilled</code> (成功) <code>rejected</code> (失败)。 只有异步操作的结果可以决定状态。</p>\n<p>其中 这3种状态的转换\b关系是 <code>pending</code> -&gt; <code>fulfilled</code>, <code>pending</code> -&gt; <code>rejected</code>. 而 fulfilled 和 rejected 这两种状态一旦形成就不可改变。</p>\n<p>一图胜千言<br><img src=\"/2018/04/20/想开个-ES6-的坑/promise.png\" alt=\"Promise图解\"></p>\n<h2 id=\"1-用法\"><a href=\"#1-用法\" class=\"headerlink\" title=\"1. 用法\"></a>1. 用法</h2><p>Promise 对象是一个构造函数，用来生成 Promise 实例。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> promise = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>)=&gt;</span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">/* do some thing */</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(<span class=\"comment\">/* promise success */</span>) &#123;</span><br><span class=\"line\">        resolve(value);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        reject(error)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p><code>resolve</code> 函数将 <code>Promise</code> 对象状态由 <code>pending</code> 变为 <code>fulfilled</code> 状态， 在异步操作成功时调用，并将异步操作的结果作为参数传递。</p>\n<p><code>reject</code> 函数的作用是，将 <code>Promise</code>对象的状态从 <code>pending</code> 变为 <code>rejected</code> 状态，在异步操作失败时调用，并将异步操作报出的错误作为参数传递。</p>\n<h2 id=\"2-Promise-prototype-then\"><a href=\"#2-Promise-prototype-then\" class=\"headerlink\" title=\"2. Promise.prototype.then()\"></a>2. Promise.prototype.then()</h2><p>Promise 实例生成之后就可以调用 then 方法分别指定 fulfilled 状态和 rejected 状态的回调函数。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">promise.then(<span class=\"function\">(<span class=\"params\">value</span>)=&gt;</span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">/* do some thing when success */</span></span><br><span class=\"line\">&#125;, (error)=&gt;&#123;</span><br><span class=\"line\">    <span class=\"comment\">/* do some thing when failed */</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>如上所示，then 方法可以接受两个参数，分别对应的是 <code>fulfilled</code> 状态的回调函数和 <code>rejected</code> 状态的回调函数。其中 <code>rejected</code> 状态的回调函数是可选参数。</p>\n<h2 id=\"3-Promise-prototype-catch\"><a href=\"#3-Promise-prototype-catch\" class=\"headerlink\" title=\"3. Promise.prototype.catch()\"></a>3. Promise.prototype.catch()</h2><p>相当于 <code>promise.then(null, rejection)</code> 用于指定异步操作失败时候的回调函数。</p>\n<p><strong>注意：如果 Promise 的状态已经是fulfilled的话，再抛出错误则不会调用 rejection函数</strong></p>\n<p><strong>Promise对象的错误具有“冒泡”性质，会一直向后传递，知道被捕获为止</strong></p>\n<h2 id=\"4-Promise-prototype-finnaly\"><a href=\"#4-Promise-prototype-finnaly\" class=\"headerlink\" title=\"4. Promise.prototype.finnaly()\"></a>4. Promise.prototype.finnaly()</h2><p><code>finally</code> 方法用于不论 Promise 对象的状态如何，都会执行的操作。（ES2018)</p>\n<h2 id=\"5-Promise-all\"><a href=\"#5-Promise-all\" class=\"headerlink\" title=\"5. Promise.all()\"></a>5. Promise.all()</h2><p>用于将多个 Promise 实例，包装成一个新的 Promise 实例。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> p = <span class=\"built_in\">Promise</span>([p1, p2, p3]);</span><br></pre></td></tr></table></figure>\n<p>Promise.all 方法接受一个数组作为参数，数组内都是 Promise 实例。 如果不是就会调用 Promise.resolve 方法，将参数转为 Promise 实例。</p>\n<p>（假设成功为true, 失败为false）<br><code>p = p1 &amp;&amp; p2 &amp;&amp; p3</code> 即 p1, p2, p3的状态都是 fulfilled 时 p 的状态才是 fulfilled。只要其中一个状态是 rejected, 那么 p 的状态就为 rejected。</p>\n<h2 id=\"6-Promise-race\"><a href=\"#6-Promise-race\" class=\"headerlink\" title=\"6. Promise.race()\"></a>6. Promise.race()</h2><p>Promise.race 方法同 Promise.all 类似。只不过公式换为 <code>p = p1 || p2 || p3</code></p>\n<h2 id=\"7-Promise-resolve\"><a href=\"#7-Promise-resolve\" class=\"headerlink\" title=\"7. Promise.resolve()\"></a>7. Promise.resolve()</h2><p>将现有对象转为 Promise 对象</p>\n<ul>\n<li>参数是 <code>Promise</code> 实例，该方法不做任何处理，直接返回该实例。</li>\n<li>参数是一个 <code>thenable</code> 对象，该方法会将对象转为 Promise 对象，然后执行 thenable 对象的 then 方法。</li>\n<li>参数不是具有 then 方法的对象或根本不是对象，该方法返回一个新的 Promise 对象，状态为 <code>fulfilled</code>。</li>\n<li>没有参数，该方法返回一个新的 Promise 对象，状态为 <code>fulfilled</code>。</li>\n</ul>\n<h2 id=\"8-Promise-reject\"><a href=\"#8-Promise-reject\" class=\"headerlink\" title=\"8. Promise.reject()\"></a>8. Promise.reject()</h2><p>该方法会返回一个新的 Promise 实例，该实例的状态为 rejected。</p>\n<p><strong>注意：该方法的参数，会作为reject的理由变成后续方法的参数。</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> thenable = &#123;</span><br><span class=\"line\">    then(resolve, reject) &#123;</span><br><span class=\"line\">        reject(<span class=\"string\">'error'</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">Promise</span>.reject(thenable).catch(<span class=\"function\"><span class=\"params\">e</span>=&gt;</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(e === thenable)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"comment\">// true</span></span><br></pre></td></tr></table></figure>"},{"title":"青岛？","date":"2018-05-01T14:57:10.000Z","_content":"\n# 作急的青岛一日游？奥，半日游\n\n五一出去浪~\n\n这次是真的扎心的`浪`了。\n\n总计三天假期。原本安排的行程如下：\n| 时间 | 地点 | \b活动 |\n|--|--|--|\n| 4.30\b日 白天 | 上海 | `好吧计划有变所以不写也罢╭(╯^╰)╮` |\n| 4.30日\b夜里 | 青岛 `台东路步行街` | 在**住的地方**（后面再说有多坑） 先落脚，放完东西后如果有时间就去附近的地方**逛夜市** |\n| 4.31日  8AM | \b | 起床 |\n| 4.31日\b 9-3.30AM| 青岛 `天主教堂` `\b青岛书店` `劈柴院` `栈桥` | **1.** 首先是`天主教堂`。行程计划里这里是最靠近住宿的地方<br> **1.5.** `青岛书店`，我对书店也是非常的有好感，\b\b之前在上海的`钟书阁`一个人就可以坐一下午，非常的舒服。本来书店是不在我的行程之中的，只是在天主教堂的\b地方发现了附近的书店，想顺路去逛逛。<br> **2.** `劈材院`，里面好多小食，可以吃吃吃啊。 \b**3.** `栈桥` 靠海（能拍照？[手动眼斜]哈哈），\b\b附近有奥帆和\b船计划是在这里\b去海上浪一波的。 |\n| 4.31日 12AM-1PM | `八宝乐海鲜` | 午饭 特色海鲜大咖（嗯，一堆堆海鲜，美滋滋） |\n| 4.31日 3-4PM | `金沙滩` or `银沙滩` | 好的我们看**海**来了 |\n| 4.31日 6-7PM | `希尔顿` | 嗯，晚饭时间，德国菜。O(∩_∩)O~~ |\n| 4.31日 9-10PM |  | 出发回住的地方 |\n| 5.1日 早上 | `八大关`附近 | 据说街拍很好看的样子 |\n\n预计和家人的安排是这个样子的。\n\n好的，看起来很棒是不是。我也觉得很棒。\n\n但素！！！（为什么加这么多感叹号？因为气啊。）\n\n首先第一天的行程还算OK，不管是误机了，还是重新订票，总之是在晚上10点左右`住宿的地方`了。\n细心地朋友发现了。是住宿的地方。我本来定的是`酒店`？去了之后呢！发现就是和宾馆一样。然后呢？屋子发霉！发霉啊！是多久没人住了？真的是进去一股味道。就是这一点弄得大家都不开心。我也不开心，可是\b怎么办，我还是\b特地在网上看了评价，看了图片。(；′⌒`)。好的后来我也投诉了它家。朋友们记住千万不要再定它家的了 名字叫： **银座佳驿** 记住了。又贵又坑。也就我这种傻子会被骗。被骗无所谓，主要弄得大家特别不开心，我也特别内疚。\n\n\b经过商(si)讨(bi)以后他们家没有给我换房间！可能是家人有点不想浪费吧，又特别累，所以就没有换住宿的地方。后来有人亲切的称它为 `牢房`。 好的我知道\b有多生气了😤。对不起\b。\n\n所以经过这个事件，对青岛的旅游的第一印象就崩了。导致后面一连串的烦恼。\n\n第二天，早上到了 `天主教堂` 不好玩。然后立马转去了金沙滩。嗯，雾蒙蒙一片，早上人还是挺多的，但是和想象中的蓝天白云还是有区别，又冷，风又大。大概只`稍微`(可能并没有玩吧)玩了玩。这里将近中午，预备吃饭了。嗯，不开心的小情绪累计起来了。\n\n\b\b想回家！不好玩！终生难忘！\n\n走吧吃饭去。\n\n不吃。\n\n好的那回家。\n\n好。\n\n于是就走了，就走了，走了，了。\n\n我下午自己回上海了。顺带在公司睡了一晚。嗯对的，我热爱工作。回复了下给我瞎开 Bug 的测试大佬。心情不美丽。\n\n## 总结\n\b\n1. 以后别自己瞎比操心\b安排。要不就跟团吧。（跟团会有消费的坑，但是玩起来不用那么操心）\n\n2. 记住你的计划永远可能会被打乱，\bPlan B 非常重要。\n\n3. 默数 10 秒再\b发火~ 当然我没有发火，这是从家人身上学到的，而且全程是我安排的。\b计划变更也该在考虑的范围内。\n\n4. \b一起旅行之后才会发现真正的性格，因为长途跋涉后身心都很疲惫，才看的出一个人内心。我才不会和\b家人置气呢。\n\n5. 开心最重要\b，哪里都有美得地方。喜欢海浪冲击脚丫的感觉。\n\n嗯，补上一张浪花照。\n\n![\b浪花](浪花.jpeg)\n","source":"_posts/青岛？.md","raw":"---\ntitle: 青岛？\ndate: 2018-05-01 22:57:10\ntags: 旅游\ncategories: 家人 旅游 娱乐\n---\n\n# 作急的青岛一日游？奥，半日游\n\n五一出去浪~\n\n这次是真的扎心的`浪`了。\n\n总计三天假期。原本安排的行程如下：\n| 时间 | 地点 | \b活动 |\n|--|--|--|\n| 4.30\b日 白天 | 上海 | `好吧计划有变所以不写也罢╭(╯^╰)╮` |\n| 4.30日\b夜里 | 青岛 `台东路步行街` | 在**住的地方**（后面再说有多坑） 先落脚，放完东西后如果有时间就去附近的地方**逛夜市** |\n| 4.31日  8AM | \b | 起床 |\n| 4.31日\b 9-3.30AM| 青岛 `天主教堂` `\b青岛书店` `劈柴院` `栈桥` | **1.** 首先是`天主教堂`。行程计划里这里是最靠近住宿的地方<br> **1.5.** `青岛书店`，我对书店也是非常的有好感，\b\b之前在上海的`钟书阁`一个人就可以坐一下午，非常的舒服。本来书店是不在我的行程之中的，只是在天主教堂的\b地方发现了附近的书店，想顺路去逛逛。<br> **2.** `劈材院`，里面好多小食，可以吃吃吃啊。 \b**3.** `栈桥` 靠海（能拍照？[手动眼斜]哈哈），\b\b附近有奥帆和\b船计划是在这里\b去海上浪一波的。 |\n| 4.31日 12AM-1PM | `八宝乐海鲜` | 午饭 特色海鲜大咖（嗯，一堆堆海鲜，美滋滋） |\n| 4.31日 3-4PM | `金沙滩` or `银沙滩` | 好的我们看**海**来了 |\n| 4.31日 6-7PM | `希尔顿` | 嗯，晚饭时间，德国菜。O(∩_∩)O~~ |\n| 4.31日 9-10PM |  | 出发回住的地方 |\n| 5.1日 早上 | `八大关`附近 | 据说街拍很好看的样子 |\n\n预计和家人的安排是这个样子的。\n\n好的，看起来很棒是不是。我也觉得很棒。\n\n但素！！！（为什么加这么多感叹号？因为气啊。）\n\n首先第一天的行程还算OK，不管是误机了，还是重新订票，总之是在晚上10点左右`住宿的地方`了。\n细心地朋友发现了。是住宿的地方。我本来定的是`酒店`？去了之后呢！发现就是和宾馆一样。然后呢？屋子发霉！发霉啊！是多久没人住了？真的是进去一股味道。就是这一点弄得大家都不开心。我也不开心，可是\b怎么办，我还是\b特地在网上看了评价，看了图片。(；′⌒`)。好的后来我也投诉了它家。朋友们记住千万不要再定它家的了 名字叫： **银座佳驿** 记住了。又贵又坑。也就我这种傻子会被骗。被骗无所谓，主要弄得大家特别不开心，我也特别内疚。\n\n\b经过商(si)讨(bi)以后他们家没有给我换房间！可能是家人有点不想浪费吧，又特别累，所以就没有换住宿的地方。后来有人亲切的称它为 `牢房`。 好的我知道\b有多生气了😤。对不起\b。\n\n所以经过这个事件，对青岛的旅游的第一印象就崩了。导致后面一连串的烦恼。\n\n第二天，早上到了 `天主教堂` 不好玩。然后立马转去了金沙滩。嗯，雾蒙蒙一片，早上人还是挺多的，但是和想象中的蓝天白云还是有区别，又冷，风又大。大概只`稍微`(可能并没有玩吧)玩了玩。这里将近中午，预备吃饭了。嗯，不开心的小情绪累计起来了。\n\n\b\b想回家！不好玩！终生难忘！\n\n走吧吃饭去。\n\n不吃。\n\n好的那回家。\n\n好。\n\n于是就走了，就走了，走了，了。\n\n我下午自己回上海了。顺带在公司睡了一晚。嗯对的，我热爱工作。回复了下给我瞎开 Bug 的测试大佬。心情不美丽。\n\n## 总结\n\b\n1. 以后别自己瞎比操心\b安排。要不就跟团吧。（跟团会有消费的坑，但是玩起来不用那么操心）\n\n2. 记住你的计划永远可能会被打乱，\bPlan B 非常重要。\n\n3. 默数 10 秒再\b发火~ 当然我没有发火，这是从家人身上学到的，而且全程是我安排的。\b计划变更也该在考虑的范围内。\n\n4. \b一起旅行之后才会发现真正的性格，因为长途跋涉后身心都很疲惫，才看的出一个人内心。我才不会和\b家人置气呢。\n\n5. 开心最重要\b，哪里都有美得地方。喜欢海浪冲击脚丫的感觉。\n\n嗯，补上一张浪花照。\n\n![\b浪花](浪花.jpeg)\n","slug":"青岛？","published":1,"updated":"2018-05-01T16:04:36.243Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjgnv6bbz00061ai2zfvd0xok","content":"<h1 id=\"作急的青岛一日游？奥，半日游\"><a href=\"#作急的青岛一日游？奥，半日游\" class=\"headerlink\" title=\"作急的青岛一日游？奥，半日游\"></a>作急的青岛一日游？奥，半日游</h1><p>五一出去浪~</p>\n<p>这次是真的扎心的<code>浪</code>了。</p>\n<p>总计三天假期。原本安排的行程如下：<br>| 时间 | 地点 | \b活动 |<br>|–|–|–|<br>| 4.30\b日 白天 | 上海 | <code>好吧计划有变所以不写也罢╭(╯^╰)╮</code> |<br>| 4.30日\b夜里 | 青岛 <code>台东路步行街</code> | 在<strong>住的地方</strong>（后面再说有多坑） 先落脚，放完东西后如果有时间就去附近的地方<strong>逛夜市</strong> |<br>| 4.31日  8AM | \b | 起床 |<br>| 4.31日\b 9-3.30AM| 青岛 <code>天主教堂</code> <code>\b青岛书店</code> <code>劈柴院</code> <code>栈桥</code> | <strong>1.</strong> 首先是<code>天主教堂</code>。行程计划里这里是最靠近住宿的地方<br> <strong>1.5.</strong> <code>青岛书店</code>，我对书店也是非常的有好感，\b\b之前在上海的<code>钟书阁</code>一个人就可以坐一下午，非常的舒服。本来书店是不在我的行程之中的，只是在天主教堂的\b地方发现了附近的书店，想顺路去逛逛。<br> <strong>2.</strong> <code>劈材院</code>，里面好多小食，可以吃吃吃啊。 \b<strong>3.</strong> <code>栈桥</code> 靠海（能拍照？[手动眼斜]哈哈），\b\b附近有奥帆和\b船计划是在这里\b去海上浪一波的。 |<br>| 4.31日 12AM-1PM | <code>八宝乐海鲜</code> | 午饭 特色海鲜大咖（嗯，一堆堆海鲜，美滋滋） |<br>| 4.31日 3-4PM | <code>金沙滩</code> or <code>银沙滩</code> | 好的我们看<strong>海</strong>来了 |<br>| 4.31日 6-7PM | <code>希尔顿</code> | 嗯，晚饭时间，德国菜。O(∩_∩)O~~ |<br>| 4.31日 9-10PM |  | 出发回住的地方 |<br>| 5.1日 早上 | <code>八大关</code>附近 | 据说街拍很好看的样子 |</p>\n<p>预计和家人的安排是这个样子的。</p>\n<p>好的，看起来很棒是不是。我也觉得很棒。</p>\n<p>但素！！！（为什么加这么多感叹号？因为气啊。）</p>\n<p>首先第一天的行程还算OK，不管是误机了，还是重新订票，总之是在晚上10点左右<code>住宿的地方</code>了。<br>细心地朋友发现了。是住宿的地方。我本来定的是<code>酒店</code>？去了之后呢！发现就是和宾馆一样。然后呢？屋子发霉！发霉啊！是多久没人住了？真的是进去一股味道。就是这一点弄得大家都不开心。我也不开心，可是\b怎么办，我还是\b特地在网上看了评价，看了图片。(；′⌒`)。好的后来我也投诉了它家。朋友们记住千万不要再定它家的了 名字叫： <strong>银座佳驿</strong> 记住了。又贵又坑。也就我这种傻子会被骗。被骗无所谓，主要弄得大家特别不开心，我也特别内疚。</p>\n<p>\b经过商(si)讨(bi)以后他们家没有给我换房间！可能是家人有点不想浪费吧，又特别累，所以就没有换住宿的地方。后来有人亲切的称它为 <code>牢房</code>。 好的我知道\b有多生气了😤。对不起\b。</p>\n<p>所以经过这个事件，对青岛的旅游的第一印象就崩了。导致后面一连串的烦恼。</p>\n<p>第二天，早上到了 <code>天主教堂</code> 不好玩。然后立马转去了金沙滩。嗯，雾蒙蒙一片，早上人还是挺多的，但是和想象中的蓝天白云还是有区别，又冷，风又大。大概只<code>稍微</code>(可能并没有玩吧)玩了玩。这里将近中午，预备吃饭了。嗯，不开心的小情绪累计起来了。</p>\n<p>\b\b想回家！不好玩！终生难忘！</p>\n<p>走吧吃饭去。</p>\n<p>不吃。</p>\n<p>好的那回家。</p>\n<p>好。</p>\n<p>于是就走了，就走了，走了，了。</p>\n<p>我下午自己回上海了。顺带在公司睡了一晚。嗯对的，我热爱工作。回复了下给我瞎开 Bug 的测试大佬。心情不美丽。</p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>\b</p>\n<ol>\n<li><p>以后别自己瞎比操心\b安排。要不就跟团吧。（跟团会有消费的坑，但是玩起来不用那么操心）</p>\n</li>\n<li><p>记住你的计划永远可能会被打乱，\bPlan B 非常重要。</p>\n</li>\n<li><p>默数 10 秒再\b发火~ 当然我没有发火，这是从家人身上学到的，而且全程是我安排的。\b计划变更也该在考虑的范围内。</p>\n</li>\n<li><p>\b一起旅行之后才会发现真正的性格，因为长途跋涉后身心都很疲惫，才看的出一个人内心。我才不会和\b家人置气呢。</p>\n</li>\n<li><p>开心最重要\b，哪里都有美得地方。喜欢海浪冲击脚丫的感觉。</p>\n</li>\n</ol>\n<p>嗯，补上一张浪花照。</p>\n<p><img src=\"/2018/05/01/青岛？/浪花.jpeg\" alt=\"\b浪花\"></p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"作急的青岛一日游？奥，半日游\"><a href=\"#作急的青岛一日游？奥，半日游\" class=\"headerlink\" title=\"作急的青岛一日游？奥，半日游\"></a>作急的青岛一日游？奥，半日游</h1><p>五一出去浪~</p>\n<p>这次是真的扎心的<code>浪</code>了。</p>\n<p>总计三天假期。原本安排的行程如下：<br>| 时间 | 地点 | \b活动 |<br>|–|–|–|<br>| 4.30\b日 白天 | 上海 | <code>好吧计划有变所以不写也罢╭(╯^╰)╮</code> |<br>| 4.30日\b夜里 | 青岛 <code>台东路步行街</code> | 在<strong>住的地方</strong>（后面再说有多坑） 先落脚，放完东西后如果有时间就去附近的地方<strong>逛夜市</strong> |<br>| 4.31日  8AM | \b | 起床 |<br>| 4.31日\b 9-3.30AM| 青岛 <code>天主教堂</code> <code>\b青岛书店</code> <code>劈柴院</code> <code>栈桥</code> | <strong>1.</strong> 首先是<code>天主教堂</code>。行程计划里这里是最靠近住宿的地方<br> <strong>1.5.</strong> <code>青岛书店</code>，我对书店也是非常的有好感，\b\b之前在上海的<code>钟书阁</code>一个人就可以坐一下午，非常的舒服。本来书店是不在我的行程之中的，只是在天主教堂的\b地方发现了附近的书店，想顺路去逛逛。<br> <strong>2.</strong> <code>劈材院</code>，里面好多小食，可以吃吃吃啊。 \b<strong>3.</strong> <code>栈桥</code> 靠海（能拍照？[手动眼斜]哈哈），\b\b附近有奥帆和\b船计划是在这里\b去海上浪一波的。 |<br>| 4.31日 12AM-1PM | <code>八宝乐海鲜</code> | 午饭 特色海鲜大咖（嗯，一堆堆海鲜，美滋滋） |<br>| 4.31日 3-4PM | <code>金沙滩</code> or <code>银沙滩</code> | 好的我们看<strong>海</strong>来了 |<br>| 4.31日 6-7PM | <code>希尔顿</code> | 嗯，晚饭时间，德国菜。O(∩_∩)O~~ |<br>| 4.31日 9-10PM |  | 出发回住的地方 |<br>| 5.1日 早上 | <code>八大关</code>附近 | 据说街拍很好看的样子 |</p>\n<p>预计和家人的安排是这个样子的。</p>\n<p>好的，看起来很棒是不是。我也觉得很棒。</p>\n<p>但素！！！（为什么加这么多感叹号？因为气啊。）</p>\n<p>首先第一天的行程还算OK，不管是误机了，还是重新订票，总之是在晚上10点左右<code>住宿的地方</code>了。<br>细心地朋友发现了。是住宿的地方。我本来定的是<code>酒店</code>？去了之后呢！发现就是和宾馆一样。然后呢？屋子发霉！发霉啊！是多久没人住了？真的是进去一股味道。就是这一点弄得大家都不开心。我也不开心，可是\b怎么办，我还是\b特地在网上看了评价，看了图片。(；′⌒`)。好的后来我也投诉了它家。朋友们记住千万不要再定它家的了 名字叫： <strong>银座佳驿</strong> 记住了。又贵又坑。也就我这种傻子会被骗。被骗无所谓，主要弄得大家特别不开心，我也特别内疚。</p>\n<p>\b经过商(si)讨(bi)以后他们家没有给我换房间！可能是家人有点不想浪费吧，又特别累，所以就没有换住宿的地方。后来有人亲切的称它为 <code>牢房</code>。 好的我知道\b有多生气了😤。对不起\b。</p>\n<p>所以经过这个事件，对青岛的旅游的第一印象就崩了。导致后面一连串的烦恼。</p>\n<p>第二天，早上到了 <code>天主教堂</code> 不好玩。然后立马转去了金沙滩。嗯，雾蒙蒙一片，早上人还是挺多的，但是和想象中的蓝天白云还是有区别，又冷，风又大。大概只<code>稍微</code>(可能并没有玩吧)玩了玩。这里将近中午，预备吃饭了。嗯，不开心的小情绪累计起来了。</p>\n<p>\b\b想回家！不好玩！终生难忘！</p>\n<p>走吧吃饭去。</p>\n<p>不吃。</p>\n<p>好的那回家。</p>\n<p>好。</p>\n<p>于是就走了，就走了，走了，了。</p>\n<p>我下午自己回上海了。顺带在公司睡了一晚。嗯对的，我热爱工作。回复了下给我瞎开 Bug 的测试大佬。心情不美丽。</p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>\b</p>\n<ol>\n<li><p>以后别自己瞎比操心\b安排。要不就跟团吧。（跟团会有消费的坑，但是玩起来不用那么操心）</p>\n</li>\n<li><p>记住你的计划永远可能会被打乱，\bPlan B 非常重要。</p>\n</li>\n<li><p>默数 10 秒再\b发火~ 当然我没有发火，这是从家人身上学到的，而且全程是我安排的。\b计划变更也该在考虑的范围内。</p>\n</li>\n<li><p>\b一起旅行之后才会发现真正的性格，因为长途跋涉后身心都很疲惫，才看的出一个人内心。我才不会和\b家人置气呢。</p>\n</li>\n<li><p>开心最重要\b，哪里都有美得地方。喜欢海浪冲击脚丫的感觉。</p>\n</li>\n</ol>\n<p>嗯，补上一张浪花照。</p>\n<p><img src=\"/2018/05/01/青岛？/浪花.jpeg\" alt=\"\b浪花\"></p>\n"}],"PostAsset":[{"_id":"source/_posts/想开个-ES6-的坑/promise.png","slug":"promise.png","post":"cjgnv6bby00051ai2cc8k42yi","modified":0,"renderable":0},{"_id":"source/_posts/青岛？/浪花.jpeg","slug":"浪花.jpeg","post":"cjgnv6bbz00061ai2zfvd0xok","modified":0,"renderable":0}],"PostCategory":[{"post_id":"cjgnv6bbp00001ai2tdgwxd3d","category_id":"cjgnv6bbv00021ai2naeplv0u","_id":"cjgnv6bc4000b1ai2ds8dc39b"},{"post_id":"cjgnv6bbt00011ai2ou3zzr3a","category_id":"cjgnv6bbv00021ai2naeplv0u","_id":"cjgnv6bc5000e1ai28mludhdy"},{"post_id":"cjgnv6bbx00041ai2s6gsg9k1","category_id":"cjgnv6bc3000a1ai2o33hbjuu","_id":"cjgnv6bc5000i1ai2ljqtzz4j"},{"post_id":"cjgnv6bby00051ai2cc8k42yi","category_id":"cjgnv6bc5000f1ai2la5h3v5i","_id":"cjgnv6bc7000m1ai2flpeayoe"},{"post_id":"cjgnv6bbz00061ai2zfvd0xok","category_id":"cjgnv6bc5000j1ai2x40512rd","_id":"cjgnv6bc8000o1ai2ntdu2df9"}],"PostTag":[{"post_id":"cjgnv6bbp00001ai2tdgwxd3d","tag_id":"cjgnv6bbx00031ai2efgzsd54","_id":"cjgnv6bc200091ai21bv6gy0a"},{"post_id":"cjgnv6bbt00011ai2ou3zzr3a","tag_id":"cjgnv6bbx00031ai2efgzsd54","_id":"cjgnv6bc4000d1ai2jtuk04qh"},{"post_id":"cjgnv6bbx00041ai2s6gsg9k1","tag_id":"cjgnv6bc4000c1ai2568swt72","_id":"cjgnv6bc5000h1ai262akujkz"},{"post_id":"cjgnv6bby00051ai2cc8k42yi","tag_id":"cjgnv6bc5000g1ai2awym8nsw","_id":"cjgnv6bc7000l1ai2vlq2kr0p"},{"post_id":"cjgnv6bbz00061ai2zfvd0xok","tag_id":"cjgnv6bc6000k1ai2mo5tjjeq","_id":"cjgnv6bc7000n1ai28o1wsa1l"}],"Tag":[{"name":"Generator async","_id":"cjgnv6bbx00031ai2efgzsd54"},{"name":"hexo","_id":"cjgnv6bc4000c1ai2568swt72"},{"name":"JavaScript Promise","_id":"cjgnv6bc5000g1ai2awym8nsw"},{"name":"旅游","_id":"cjgnv6bc6000k1ai2mo5tjjeq"}]}}